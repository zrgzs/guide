<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zrgzs.github.io/guide</id>
    <title>卓软信息工作室 • Posts by &#34;复习资料&#34; category</title>
    <link href="https://zrgzs.github.io/guide" />
    <updated>2023-09-07T09:59:14.000Z</updated>
    <entry>
        <id>https://zrgzs.github.io/guide/2023/09/07/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
        <title>操作系统</title>
        <link rel="alternate" href="https://zrgzs.github.io/guide/2023/09/07/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h2 id=&#34;1-操作系统的定义-目标-作用是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-操作系统的定义-目标-作用是什么&#34;&gt;#&lt;/a&gt; 1、操作系统的定义、目标、作用是什么？&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h3&gt;
&lt;p&gt;操作系统是一组控制和管理计算机软硬件资源、合理地对各类作业进行调度以及方便用户使用的程序集合。&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h3&gt;
&lt;p&gt;①方便性：操作系统使计算机更易于使用。②有效性：操作系统允许以更有效的方式使用计算机系统资源。A. 提高系统资源利用率 B. 提高系统的吞吐量③可扩展性：在操作系统中，允许有效地开发，测试和引进新的系统功能。④开放性：实现应用程序的可移植性和互操作性，要求具有统一的开放的环境。&lt;/p&gt;
&lt;h3 id=&#34;作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;p&gt;OS 作为用户与计算机硬件系统之间的接口，用户可通过命令方式、系统调用方式、GUI 方式取得 OS 的服务 OS 作为计算机系统资源的管理者，包括处理机管理、存储器管理、I/O 设备管理、文件管理等。OS 实现了对计算机资源的抽象，可将具体的计算机硬件资源抽象成软件资源，方便用户使用和扩展开放了简单的访问方式，隐藏了实现细节&lt;/p&gt;
&lt;h2 id=&#34;2-时间片大小如何选择依据是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-时间片大小如何选择依据是什么&#34;&gt;#&lt;/a&gt; 2、时间片大小如何选择？依据是什么？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;响应时间要求：较小的时间片可以提供更快的响应时间。&lt;/li&gt;
&lt;li&gt;吞吐量要求：较大的时间片可以提高系统的吞吐量。&lt;/li&gt;
&lt;li&gt;进程调度算法：不同的调度算法对时间片大小有不同的要求。&lt;/li&gt;
&lt;li&gt;系统负载：根据系统负载情况选择合适的时间片大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-进程的状态图以及何时会发生切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-进程的状态图以及何时会发生切换&#34;&gt;#&lt;/a&gt; 3、进程的状态图以及何时会发生切换？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907220338.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-死锁的定义死锁产生的必要条件-如何预防死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-死锁的定义死锁产生的必要条件-如何预防死锁&#34;&gt;#&lt;/a&gt; 4、死锁的定义，死锁产生的必要条件、如何预防死锁？&lt;/h2&gt;
&lt;p&gt;定义：指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，这些进程都将永远不能再向前推进。（1）死锁发生的必要条件：互斥条件、请求和保持条件、不可剥夺条件、循环等待条件（3）银行家算法、安全性算法&lt;/p&gt;
&lt;h2 id=&#34;5-pcb的三种链接方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-pcb的三种链接方式&#34;&gt;#&lt;/a&gt; 5、PCB 的三种链接方式？&lt;/h2&gt;
&lt;p&gt;线性方式、链接方式、索引方式&lt;/p&gt;
&lt;h2 id=&#34;6-进程和线程的对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-进程和线程的对比&#34;&gt;#&lt;/a&gt; 6、进程和线程的对比？&lt;/h2&gt;
&lt;p&gt;引入进程和线程都是为了提高系统的并发性，一个进程至少有一个线程，线程是进程的一部分，线程也被称为轻权进程或者轻量级进程。对比：①进程的开销大，线程的开销小；②线程是处理机调度的基本单位、进程是分配资源的基本单位。③进程拥有独立地址空间，线程无地址空间，共享所属进程内的地址空间。④线程可以更好地支持多处理机系统。&lt;/p&gt;
&lt;h2 id=&#34;7-处理机调度的三个层次&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-处理机调度的三个层次&#34;&gt;#&lt;/a&gt; 7、处理机调度的三个层次？&lt;/h2&gt;
&lt;p&gt;高级调度 低级调度 中级调度&lt;/p&gt;
&lt;h2 id=&#34;8-临界区资源定义四条准则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-临界区资源定义四条准则&#34;&gt;#&lt;/a&gt; 8、临界区资源定义？四条准则？&lt;/h2&gt;
&lt;p&gt;临界区资源：系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源或共享变量。 4 条准则：空闲让进、忙则等待、有限等待、让权等待&lt;/p&gt;
&lt;h2 id=&#34;9-什么是通道为什么会出现瓶颈现象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-什么是通道为什么会出现瓶颈现象&#34;&gt;#&lt;/a&gt; 9、什么是通道？为什么会出现瓶颈现象？&lt;/h2&gt;
&lt;p&gt;通道是一种特殊的处理机，使一些原来由 CPU 处理的 I/O 任务转由通道来承担，从而把 CPU 从繁杂的 I/O 任务中解脱出来。通道是硬件，价格昂贵。造成 “瓶颈” 现象，解决办法：增加设备到 CPU 间的通路而不增加通道。&lt;/p&gt;
&lt;h2 id=&#34;10-假脱机系统和假脱机打印技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-假脱机系统和假脱机打印技术&#34;&gt;#&lt;/a&gt; 10、假脱机系统和假脱机打印技术？&lt;/h2&gt;
&lt;p&gt;为了缓和 CPU 的高速性与 I/O 设备的低速性间的矛盾而引入了 SPOOLing 技术。利用一个程序模拟脱机输入时的外围控制机功能，把低速 I/O 设备上的数据传送到高速磁盘上用另一道程序模拟脱机输出时外围控制机的功能，把数据从磁盘传送到低速输出设备。假脱机系统组成：输入井、输出井、输入缓冲区、输出缓冲区、输入进程、输出进程、井管理程序 ** 假脱机打印技术 **&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;磁盘缓冲区：用于暂存用户程序的输出数据的磁盘空间。&lt;/li&gt;
&lt;li&gt;打印缓冲区：位于内存中，用于暂存从磁盘缓冲区读取的数据。&lt;/li&gt;
&lt;li&gt;假脱机管理进程和假脱机打印进程：假脱机管理进程负责为每个打印请求创建一个假脱机文件，并将其放入文件队列中。假脱机打印进程按顺序处理文件队列中的文件进行打印。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用户发起打印请求时，系统会在磁盘缓冲区中申请一个空闲盘块，并将要打印的数据存储在其中。同时，为用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入表中，然后将该表挂载到假脱机文件队列上。当打印机处于空闲状态时，假脱机打印进程从请求打印队列的队首获取一个请求打印表。根据表中的要求，将要打印的数据从磁盘缓冲区传送到打印缓冲区，然后由打印机进行打印。这样的系统设计允许打印过程与用户程序的执行过程并行进行，提高了系统的效率和响应速度。&lt;/p&gt;
&lt;h2 id=&#34;11-缓冲的作用缓冲有哪些分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-缓冲的作用缓冲有哪些分类&#34;&gt;#&lt;/a&gt; 11、缓冲的作用？缓冲有哪些分类？&lt;/h2&gt;
&lt;h3 id=&#34;作用-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用-2&#34;&gt;#&lt;/a&gt; 作用：&lt;/h3&gt;
&lt;p&gt;缓和 CPU 与 I/O 设备间速度不匹配的矛盾减少对 CPU 的中断频率，放宽对 CPU 中断响应时间的限制解决数据粒度不匹配的问题提高 CPU 与 I/O 设备之间的并行性&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;输入缓冲：用于接收和存储输入数据。&lt;/li&gt;
&lt;li&gt;输出缓冲：用于暂存输出数据。&lt;/li&gt;
&lt;li&gt;磁盘缓冲：用于暂存磁盘读写的数据。&lt;/li&gt;
&lt;li&gt;网络缓冲：用于存储网络数据传输的缓冲区。&lt;/li&gt;
&lt;li&gt;缓存：位于 CPU 和主存之间的高速存储器。&lt;/li&gt;
&lt;li&gt;页面缓冲：用于虚拟内存系统中的页面交换和传输。&lt;/li&gt;
&lt;li&gt;缓冲区池：管理和分配多个缓冲区的集合。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;12-文件目录管理的要求-基本功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-文件目录管理的要求-基本功能&#34;&gt;#&lt;/a&gt; 12、文件目录管理的要求、基本功能？&lt;/h2&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;唯一标识：每个文件和目录都有唯一的标识符。&lt;/li&gt;
&lt;li&gt;命名规则：清晰、统一的文件和目录命名规则。&lt;/li&gt;
&lt;li&gt;存储空间管理：有效管理文件的存储空间。&lt;/li&gt;
&lt;li&gt;文件组织和访问控制：提供文件组织和访问控制机制。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建和删除：创建新文件和目录，删除已有文件和目录。&lt;/li&gt;
&lt;li&gt;搜索和定位：通过文件名或属性搜索和定位文件和目录。&lt;/li&gt;
&lt;li&gt;重命名和移动：更改文件和目录名称，移动它们到不同位置。&lt;/li&gt;
&lt;li&gt;组织和层次结构：支持文件和目录的组织和层次结构&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-09-07T09:59:14.000Z</updated>
    </entry>
</feed>
