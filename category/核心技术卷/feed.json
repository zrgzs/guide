{
    "version": "https://jsonfeed.org/version/1",
    "title": "卓软信息工作室 • All posts by \"核心技术卷\" category",
    "description": "",
    "home_page_url": "https://zrgzs.github.io/guide",
    "items": [
        {
            "id": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%B8%80(1.1%20_%207.2.5)/",
            "url": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%B8%80(1.1%20_%207.2.5)/",
            "title": "卷一(1.1 _ 7.2.5)",
            "date_published": "2023-09-07T09:59:14.000Z",
            "content_html": "<h1 id=\"331-无符号数的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#331-无符号数的应用场景\">#</a> 3.3.1 - 无符号数的应用场景</h1>\n<p>Java 中没有无符号数，暂略。但不排除会有使用场景。</p>\n<h1 id=\"334-码点和代码单元\"><a class=\"markdownIt-Anchor\" href=\"#334-码点和代码单元\">#</a> 3.3.4 - 码点和代码单元</h1>\n<h2 id=\"码点\"><a class=\"markdownIt-Anchor\" href=\"#码点\">#</a> 码点：</h2>\n<p>是指与一个<strong>编码表中的某个字符对应的代码值。</strong></p>\n<h2 id=\"代码单元\"><a class=\"markdownIt-Anchor\" href=\"#代码单元\">#</a> 代码单元：</h2>\n<p>是<strong>指在基本多语言平面中的每个字符</strong>，每个字符用 16 位表示，通常成为代码单元</p>\n<h2 id=\"注\"><a class=\"markdownIt-Anchor\" href=\"#注\">#</a> 注：</h2>\n<ul>\n<li>在 Unicode 中，码点采用 16 进制书写，并加上前缀 U+，例如 U+0041 就是拉丁字母 A 的码点。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RndmluY2VudC9hcnRpY2xlL2RldGFpbHMvOTM4ODQ3MjU=\">UniCode 编码表</span></li>\n<li><code>**String**</code> <strong> 类的</strong> <code>**length()**</code> ** 返回的是码点。**</li>\n<li>从 U+0000 到 U+FFFF 的字符集有时称为基本多语言平面 (BMP) 。<strong>码位大于 U+FFFF 的字符称为补充字符 s。</strong> **Java 平台在 char 数组以及 String 和 StringBuffer 类中使用 UTF-16 表示。** 在此表示中，<strong>补充字符表示为一对 char 值，第一个来自高代理范围 (\\uD800-\\uDBFF)，第二个来自低代理范围 (\\uDC00-\\uDFFF)。</strong></li>\n<li><strong>因此， char 值表示基本多语言平面 (BMP) 代码点，包括代理代码点或 UTF-16 编码的代码单元。一个 int 值表示所有 Unicode 代码点，包括补充代码点。</strong> int 的低（最低）21 位用于表示 Unicode 代码点，高（最高）11 位必须为零。除非另有说明，关于补充字符和代理 char 值的行为如下：\n<ul>\n<li>** 只接受 char 值的方法不支持补充字符。它们将代理范围中的 char 值视为未定义字符。** 例如，  <code>Character.isLetter('\\uD840')</code>  返回 false ，即使此特定值后跟字符串中的任何低代理值将表示一个字母。</li>\n<li>** 接受 int 值的方法支持所有 Unicode 字符，包括补充字符。** 例如，  <code>Character.isLetter(0x2F81A)</code>  返回 true ，因为代码点值表示一个字母（CJK 表意文字）。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"351-算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#351-算术运算符\">#</a> 3.5.1 - 算术运算符</h1>\n<p>很多 Intel 处理器在计算 x * y /z 时，** 会将结果存储在 80 位寄存器中，再除以 z 并将结果截断位 64 位。** 这样可以得到一个更加精确的结果，并且还能避免产生指数溢出。但是，这个结果可能与始终使用 64 位计算的结果不一样。因此，JVM 最初规范规定所有的中间计算都必须进行截断。（也就是全程使用 64 位的空间进行计算）。这种做法遭到了数字社区的反对。</p>\n<ul>\n<li>截断可能导致溢出</li>\n<li>截断操作需要消耗时间</li>\n</ul>\n<p><strong>所以，现阶段在默认情况下允许对中间结果使用扩展的精度。但是，对于使用 <strong> <code>**strictfp**</code> </strong> 关键字标记的方法必须使用严格的浮点计算来生成可再生的结果。</strong></p>\n<h1 id=\"364-不区分大小写的-equals\"><a class=\"markdownIt-Anchor\" href=\"#364-不区分大小写的-equals\">#</a> 3.6.4 - 不区分大小写的 equals ()</h1>\n<p><code>public boolean equalsIgnoreCase(String anotherString)</code></p>\n<p>将此 <code>String</code>  与其他 <code>String</code>  比较，忽略案例注意事项。如果两个字符串的长度相同，并且两个字符串中的相应字符等于忽略大小写，则两个字符串被认为是相等的。</p>\n<p>如果以下至少一个为真，则两个字符 <code>c1</code>  和 <code>c2</code>  被认为是相同的忽略情况：</p>\n<ul>\n<li>两个字符相同（与 <code>==</code>  操作符相比）</li>\n<li>将方法 <code>[Character.toUpperCase(char)](../../java/lang/Character.html#toUpperCase-char-)</code>  应用于每个字符产生相同的结果</li>\n<li>将方法 <code>[Character.toLowerCase(char)](../../java/lang/Character.html#toLowerCase-char-)</code>  应用于每个字符产生相同的结果</li>\n<li>参数 <code>anotherString</code>  -  <code>String</code>  将此  <code>String</code>  对比</li>\n<li>结果 <code>true</code>  如果参数不是 <code>null</code>   ，它代表等效的 <code>String</code>  忽略大小写； <code>false</code>  否则</li>\n</ul>\n<h1 id=\"372-printf-格式化输出\"><a class=\"markdownIt-Anchor\" href=\"#372-printf-格式化输出\">#</a> 3.7.2 - printf () 格式化输出</h1>\n<h2 id=\"先上源码的解释\"><a class=\"markdownIt-Anchor\" href=\"#先上源码的解释\">#</a> 先上源码的解释：</h2>\n<ul>\n<li>使用指定格式字符串和参数将格式化字符串写入此输出流的便捷方法。形式为 out.printf (l, format, args) 的此方法的调用与调用的行为方式完全相同 out.format (l, format, args)</li>\n<li>参形：l – ** 格式化期间应用的语言环境。如果 l 为空，则不应用本地化。**format –<strong>格式字符串语法中描述的格式字符串</strong> args – <strong>格式字符串中的格式说明符引用的参数。如果参数多于格式说明符，则忽略多余的参数。参数的数量是可变的，可能为零。参数的最大数量受 Java™ 虚拟机规范定义的 Java 数组的最大维度限制。 null 参数的行为取决于转换。</strong></li>\n<li>返回值：这个输出流</li>\n<li>抛出：\n<ul>\n<li>java.util.IllegalFormatException – 如果格式字符串包含非法语法、与给定参数不兼容的格式说明符、给定格式字符串的参数不足或其他非法条件。有关所有可能的格式错误的规范，请参阅格式化程序类规范的详细信息部分。</li>\n<li>NullPointerException – 如果格式为 null</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"格式\"><a class=\"markdownIt-Anchor\" href=\"#格式\">#</a> 格式：</h2>\n<ul>\n<li>每一个以 % 开头的格式说明符都用相应的参数替换。</li>\n<li>格式说明符的尾部的转换符指示要格式化的数值类型</li>\n<li></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>十进制整数</td>\n<td>159</td>\n</tr>\n<tr>\n<td>x</td>\n<td>十六进制整数</td>\n<td>9f</td>\n</tr>\n<tr>\n<td>o</td>\n<td>八进制整数</td>\n<td>237</td>\n</tr>\n<tr>\n<td>f</td>\n<td>定点浮点数</td>\n<td>15.9</td>\n</tr>\n<tr>\n<td>e</td>\n<td>指数浮点数</td>\n<td>1.59e+01</td>\n</tr>\n<tr>\n<td>g</td>\n<td>通用浮点数（e 和 f 中较短的一个）</td>\n<td>—</td>\n</tr>\n<tr>\n<td>a</td>\n<td>十六进制浮点数</td>\n<td>0x1.fccdp3</td>\n</tr>\n<tr>\n<td>s</td>\n<td>字符串</td>\n<td>hello</td>\n</tr>\n<tr>\n<td>c</td>\n<td>字符</td>\n<td>H</td>\n</tr>\n<tr>\n<td>b</td>\n<td>布尔</td>\n<td>true</td>\n</tr>\n<tr>\n<td>h</td>\n<td>散列码</td>\n<td>42628b2</td>\n</tr>\n<tr>\n<td>tx 或 Tx</td>\n<td>日期时间（T 强制大写）</td>\n<td>已过时，应当使用 java.time 包下的类</td>\n</tr>\n<tr>\n<td>%</td>\n<td>百分号</td>\n<td>%</td>\n</tr>\n<tr>\n<td>n</td>\n<td>与平台有关的行分隔符</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>另外，还可以指定控制格式化输出外观的各种标志。见下表</li>\n<li></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>目的</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>打印正数和负数的符号</td>\n<td>+3333.33</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>在正数之前添加空格</td>\n<td>| 3333| （或运算符只是为了使空格明显）</td>\n</tr>\n<tr>\n<td>0</td>\n<td>在数字前面补 0 (%06d 表示数字长度为 6，如果小于 6 就补 0，否则不补)</td>\n<td>003333</td>\n</tr>\n<tr>\n<td>-</td>\n<td>左对齐 (不知道有啥用)</td>\n<td>|3333|</td>\n</tr>\n<tr>\n<td>(</td>\n<td>将负数括在括号内</td>\n<td>(3333) (此处的 args 是 - 3333，括起来之后 - 号省去)</td>\n</tr>\n<tr>\n<td>,</td>\n<td>添加分组分隔符</td>\n<td>3,333.33</td>\n</tr>\n<tr>\n<td>#(对于 f 格式)</td>\n<td>包含小数点</td>\n<td>3,333.000000 (看<strong>注：</strong>)</td>\n</tr>\n<tr>\n<td>#(对于 x 或 o 格式)</td>\n<td>添加前缀 0x 或 0</td>\n<td>0xcafe</td>\n</tr>\n<tr>\n<td>$</td>\n<td>指定要格式化的索引，例如，%1<img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215719.jpg\" alt=\"\">x 将以十进制和十六进制打印第一个参数</td>\n<td>159 9F</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>格式化前面说明的数值。例如：% d%&lt;x 将以十进制和十六进制打印同一个数值</td>\n<td>159 9F</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"b88918dc-1\"></a></p>\n<h3 id=\"注-2\"><a class=\"markdownIt-Anchor\" href=\"#注-2\">#</a> 注：</h3>\n<ul>\n<li>关于 % 的解释：就像 \\ 一样，需要两个 \\ 反斜杠才能表示一个反斜杠，自己转意自己</li>\n<li>#(对于 f 格式): 代码实现会加 六个 0 在小数点后面，不知道为啥</li>\n</ul>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintfTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年%d岁\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年%+d岁\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年% d岁\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年%(d岁\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年%+d岁\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d的十进制是%&lt;d, 八进制是%&lt;o, 十六进制是%&lt;x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d的十进制是%1$d, 八进制是%1$o, 十六进制是%1$x;\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"%d的十进制是%2$d, 八进制是%2$o, 十六进制是%2$x;\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%05d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"373-相对路径是相对于谁的\"><a class=\"markdownIt-Anchor\" href=\"#373-相对路径是相对于谁的\">#</a> 3.7.3 - 相对路径是相对于谁的？</h1>\n<p>文件相对于 Java 虚拟机启动目录的位置，或者由 IDE 控制。可以通过  <code>System.getProperty(&quot;user.dir&quot;)</code>  来获取路径。</p>\n<h1 id=\"381-块作用域\"><a class=\"markdownIt-Anchor\" href=\"#381-块作用域\">#</a> 3.8.1 - 块作用域</h1>\n<p>块（即复合语句）是指由若干条 Java 语句组成的语句，并用一对大括号括起来。<strong>块确定了变量的作用域。</strong></p>\n<h1 id=\"384-for-循环的基本编写准则\"><a class=\"markdownIt-Anchor\" href=\"#384-for-循环的基本编写准则\">#</a> 3.8.4 - for 循环的基本编写准则</h1>\n<p>for 语句的三个部分应该对同一个计数器变量进行 <strong>初始化、检测、更新。</strong></p>\n<h1 id=\"386-路程控制中的-break\"><a class=\"markdownIt-Anchor\" href=\"#386-路程控制中的-break\">#</a> 3.8.6 - 路程控制中的 break</h1>\n<p>大多数  <code>break</code>  的使用都是跳出当前循环，但实际上并不止于此。</p>\n<p>事实上，还有一种带标签的  <code>break</code>  语句，<strong>执行带标签的 <strong> <code>**break**</code> </strong> 语句会跳转到带标签的语句块末尾。</strong></p>\n<p>且标签可以应用到任何语句，甚至可以应用到 if 语句或者 块语句。<strong>但标签也会被 块语句 限制其作用域</strong></p>\n<h1 id=\"3106-数组排序中的算法\"><a class=\"markdownIt-Anchor\" href=\"#3106-数组排序中的算法\">#</a> 3.10.6 - 数组排序中的算法</h1>\n<ul>\n<li>\n<h2 id=\"arrayssort-使用了优化的快速排序算法\"><a class=\"markdownIt-Anchor\" href=\"#arrayssort-使用了优化的快速排序算法\">#</a>  <code>Arrays.sort()</code>  使用了优化的快速排序算法。</h2>\n</li>\n</ul>\n<h2 id=\"源码解析画饼充饥\"><a class=\"markdownIt-Anchor\" href=\"#源码解析画饼充饥\">#</a> 源码解析：画饼充饥</h2>\n<ul>\n<li></li>\n</ul>\n<ul>\n<li>\n<h2 id=\"arraysbinarysearch-使用二分查找算法\"><a class=\"markdownIt-Anchor\" href=\"#arraysbinarysearch-使用二分查找算法\">#</a>  <code>Arrays.binarySearch()</code>  使用二分查找算法。</h2>\n</li>\n</ul>\n<h2 id=\"源码解析没吃饱再来一个\"><a class=\"markdownIt-Anchor\" href=\"#源码解析没吃饱再来一个\">#</a> 源码解析：没吃饱，再来一个</h2>\n<ul>\n<li></li>\n</ul>\n<h1 id=\"411-类-变量-方法-封装的定义\"><a class=\"markdownIt-Anchor\" href=\"#411-类-变量-方法-封装的定义\">#</a> 4.1.1 - 类、变量、方法、封装的定义</h1>\n<ul>\n<li>** 类：** 是构造对象的模板或蓝图。</li>\n<li>** 变量：** 是对象中的数据。</li>\n<li>** 方法：** 操作数据的过程成为方法。</li>\n<li>** 封装：** 是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方式。</li>\n</ul>\n<h1 id=\"412-对象的三大特性存疑\"><a class=\"markdownIt-Anchor\" href=\"#412-对象的三大特性存疑\">#</a> 4.1.2 - 对象的三大特性（存疑）</h1>\n<ol>\n<li>对象的行为\n<ul>\n<li>可以对对象完成哪些操作，或者可以对对象应用哪些方法？</li>\n<li><strong>对象的行为通过对象的方法来定义</strong></li>\n</ul>\n</li>\n<li>对象的状态\n<ul>\n<li>当调用哪些方法时，对象会如何响应？</li>\n<li><strong>对象的状态通过变量来定义</strong></li>\n<li>** 注：** 如果不经过方法调用就可以改变对象状态，只能说明破坏了封装性</li>\n</ul>\n</li>\n<li>对象的标识（因为对象的状态并不能完全描述以一个对象，所以会有对象的标识）\n<ul>\n<li>如何区分具有相同行为与状态的不同对象？</li>\n<li>对象的标识是对属性进行赋值（存疑）</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"413-类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#413-类之间的关系\">#</a> 4.1.3 - 类之间的关系</h1>\n<ul>\n<li>依赖 ------- 例如 service 层得类需要 DAO 层的方法</li>\n<li>聚合 ------- 例如 Person 类 可以包含 Student 类、Teacher 类</li>\n<li>继承 ------- 例如 所有类都继承自 Object 类</li>\n<li>接口实现</li>\n<li>关联</li>\n<li>直接关联</li>\n</ul>\n<p>详见：直接上大佬的 blog ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZpY2t5d2F5L2FydGljbGUvZGV0YWlscy83NTgzNTQ1\">Java 类之间的关联关系_少主无翼的博客 - CSDN 博客_java 类关联</span></p>\n<h1 id=\"435-java-10-新特性\"><a class=\"markdownIt-Anchor\" href=\"#435-java-10-新特性\">#</a> 4.3.5 - Java 10 新特性</h1>\n<p>在 Java 10 中，如果可以从变量的初始值推导出他们的类型，那么可以用 var 关键字声明局部变量，而无需指定类型。</p>\n<p>例如  <code>var str = &quot;hello&quot;;</code></p>\n<h1 id=\"436-null-引用\"><a class=\"markdownIt-Anchor\" href=\"#436-null-引用\">#</a> 4.3.6 - null 引用</h1>\n<p>防止 <strong>NPE</strong> 的方法：</p>\n<ul>\n<li>宽容型：把 null 参数转换为一个适当的非 null 值\n<ul>\n<li>Java 9 中 Objects 类提供了一个方法： <code>requireNonNullElse()</code></li>\n<li></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mouth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      name <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNullElse</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<h2 id=\"严格型拒绝-null-参数\"><a class=\"markdownIt-Anchor\" href=\"#严格型拒绝-null-参数\">#</a> 严格型：拒绝 null 参数</h2>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mouth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNullElse</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>**requireNonNullElse()**</code> <strong> 详解：</strong></p>\n<ul>\n<li>public static <T> T requireNonNullElse (T obj, T defaultObj) 如果第一个参数为非 null，则返回该参数，否则返回非第二个参数。</li>\n<li>类型参数：\n<ul>\n<li>T- 引用的类型</li>\n</ul>\n</li>\n<li>参数：\n<ul>\n<li>obj- 一个对象</li>\n</ul>\n</li>\n<li>defaultObj- 如果第一个参数是 nullnull</li>\n<li>返回：如果第一个参数是非 null ，则为第二个参数</li>\n<li>抛出：NullPointerException- 如果两者都为空且为 null</li>\n<li><strong>源码：</strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">requireNonNullElse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> defaultObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>defaultObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"defaultObj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"437-方法的-隐式参数-和-显式参数\"><a class=\"markdownIt-Anchor\" href=\"#437-方法的-隐式参数-和-显式参数\">#</a> 4.3.7 - 方法的 隐式参数 和 显式参数</h1>\n<ul>\n<li>隐式参数为出现在方法前面，也被称为 方法调用的目标 或 接收者。\n<ul>\n<li>如： <code>student.setName(&quot;Jack&quot;);</code>  student 就是隐式参数；</li>\n<li><strong>this</strong> 也是隐式参数</li>\n</ul>\n</li>\n<li>显示参数出现在方法的括号内</li>\n</ul>\n<h1 id=\"438-封装的注意点\"><a class=\"markdownIt-Anchor\" href=\"#438-封装的注意点\">#</a> 4.3.8 - 封装的注意点</h1>\n<p><strong>警告：不要编写返回可变对象引用的访问器方法；</strong></p>\n<p>例如下面这个类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> hirDay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getHirDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> hirDay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>LocalData 没有更改器方法，与之不同的是 Date 类有一个更改器方法 setTime () ，可以在这里设置毫秒数！！！</p>\n<p>所以 Date 对象是可变的，这一点就破坏了封装性！请看下面这段代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Employee</span> harry <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Date</span> d <span class=\"token operator\">=</span> harry<span class=\"token punctuation\">.</span><span class=\"token function\">getHirDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> tenYearsInMilliSeconds <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">365.25</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 这里没有通过该对象修改该对象的属性，破坏了封装性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>d<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> tenYearsInMilliSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 所以返回可变对象的引用时，应该 clone 一个副本进行返回</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将上面的类代码修改为</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> hirDay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getHirDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> hirDay<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"467-初始化单个类时的执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#467-初始化单个类时的执行顺序\">#</a> 4.6.7- 初始化单个类时的执行顺序</h1>\n<ol>\n<li>如果构造器的第一行调用类另一个构造器，则基于所提供的参数执行第二个构造器。</li>\n<li>否则\n<ol>\n<li><strong>所有数据字段初始化默认值（0，false，null）</strong></li>\n<li>按照<strong>在类声明中出现的顺序</strong>，执行所有字段初始化方法和初始化块</li>\n</ol>\n</li>\n<li><strong>执行构造器主体代码</strong></li>\n</ol>\n<h1 id=\"472-import-使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#472-import-使用注意事项\">#</a> 4.7.2 - import 使用注意事项</h1>\n<ul>\n<li>只能使用 _ 导入一个包，不能使用 import java._ 导入所有以 java 为前缀的包</li>\n<li>编译为字节码文件后，总是使用完整的包名引用其他类</li>\n</ul>\n<h1 id=\"473-静态导入\"><a class=\"markdownIt-Anchor\" href=\"#473-静态导入\">#</a> 4.7.3 - 静态导入</h1>\n<p>可以使用 import static 导入静态方法 和 静态字段，而不只是类。</p>\n<p>导入之后再使用静态方法和静态字段就不需要加类名前缀。</p>\n<h1 id=\"474-编译时不检测目录结构\"><a class=\"markdownIt-Anchor\" href=\"#474-编译时不检测目录结构\">#</a> 4.7.4 - 编译时不检测目录结构</h1>\n<p>虽然书上写道：编译器在编译源文件时不检查目录结构。编译通过的程序运行时，虚拟机就会找不到类。</p>\n<p>但是 IDEA 却会报错，看来这个是 IDEA 的扩展功能？</p>\n<h1 id=\"475-包名为什么不能以-java-命名\"><a class=\"markdownIt-Anchor\" href=\"#475-包名为什么不能以-java-命名\">#</a> 4.7.5 - 包名为什么不能以 java 命名？</h1>\n<p>因为 java.awt 包下 Window 类的静态变量 warningString 不是 private！这意味着同一包下的类都可以访问该静态变量。这个问题已经 20 多年了，这个变量仍然存在。不仅如此，这个类还陆续增加了一些新的字段，而器中大约有一半也不是私有的。</p>\n<p>这会成为一个问题！只需要用户自定义一个包名以 java.awt 为前缀的 类，那么就可以访问到 java.awt 的内部了，使用这一手段可以轻易的设置警告字符串。</p>\n<p>所以从 JDK 1.2 开始，JDK 实现者修改了类加载器，明确禁止了加载包名以 java. 开头的用户自定义的类</p>\n<h1 id=\"410-类设计技巧\"><a class=\"markdownIt-Anchor\" href=\"#410-类设计技巧\">#</a> 4.10 - 类设计技巧</h1>\n<ol>\n<li>一定要保证数据私有</li>\n</ol>\n<ul>\n<li>这是最重要的；绝对不要破坏封装性。</li>\n</ul>\n<ol start=\"2\">\n<li>一定要对数据进行初始化。</li>\n</ol>\n<ul>\n<li>最好不要依赖于系统的默认值，而是应该显式的初始化所有的数据，可以提供默认值，也可以在所有构造器中设置默认值</li>\n</ul>\n<ol start=\"3\">\n<li>不要在类中使用过多的基本类型</li>\n</ol>\n<ul>\n<li>这个想法是要用其他的类替换使用多个相关的基本类型。例如：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以使用 Address 类来替换以下的实例字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> street<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> zip<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>不是所有的字段都需要单独的字段访问器和字段更改器</li>\n</ol>\n<ul>\n<li>例如：员工的入职日期，学生的出生日期等</li>\n</ul>\n<ol start=\"5\">\n<li>分解有过多职责的类</li>\n<li>类名和方法名要能够体现他们的职责（阿里开发手册也这样说）</li>\n<li>优先使用不可变的类</li>\n</ol>\n<h1 id=\"515-数组引用可以自动向上转型\"><a class=\"markdownIt-Anchor\" href=\"#515-数组引用可以自动向上转型\">#</a> 5.1.5 - 数组引用可以自动向上转型</h1>\n<p>在 Java 中，子类引用的数组可以转化为超类引用的数组，而不需要强制类型转换。<strong>但是可能会有意想不到的错误。</strong></p>\n<h1 id=\"516-方法调用的详细过程\"><a class=\"markdownIt-Anchor\" href=\"#516-方法调用的详细过程\">#</a> 5.1.6 - 方法调用的详细过程</h1>\n<p>这里假设要调用  <code>x.f(args)</code>  ，隐式参数声明为 类 C 的一个对象。（隐式参数详见：4.3.7）</p>\n<ol>\n<li>编译器<strong>查看对象的声明类型和方法名</strong>。这里由于重载，不一样只有一个待选项。</li>\n<li>编译器确定方法中提供的参数类型。<strong>称为重载解析</strong></li>\n<li><strong>如果是 private、static、final 方法，那么此时编译器可以准确的知道应该调用哪个方法</strong>。<strong>这称为静态绑定</strong>。如果要调用的<strong>方法依赖于隐式参数的实际类型</strong>，那么必须在运行是<strong>使用动态绑定</strong>。</li>\n<li>程序运行并且采用动态绑定调用方法时，虚拟机必须调用与 x 所引用对象的实际类型对应的那个方法。</li>\n</ol>\n<p>注：</p>\n<ul>\n<li><strong>方法的名字和参数称为方法的签名。返回类型不是签名的一部分。</strong></li>\n<li>若某个方法被重写了且有返回值，那么我们说这两个方法有<strong>可协变</strong>的返回类型。\n<ul>\n<li><strong>可协变的返回类型</strong> ：允许子类将覆盖方法的返回类型定义为原返回类型的子类型。</li>\n</ul>\n</li>\n<li>每次调用方法都需要完成上述搜索步骤，时间开销相当大。\n<ul>\n<li>因此<strong>虚拟机预先为每个类计算了一个方法表</strong>，其中列出了所有的方法签名和要实际调用的方法。</li>\n<li>或许每个类都有一个方法表？（存疑）</li>\n</ul>\n</li>\n<li>动态绑定有一个非常重要的特性：\n<ul>\n<li><strong>无需对现有的代码进行修改就可以对程序进行扩展。</strong></li>\n</ul>\n</li>\n<li>在覆盖（重写）方法时，子类方法的作用范围<strong>不能低于</strong>父类方法的作用范围。</li>\n</ul>\n<h1 id=\"518-强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#518-强制类型转换\">#</a> 5.1.8 - 强制类型转换</h1>\n<ul>\n<li><strong>进行强制类型转换的唯一原因是：要暂时忽视对象的实际类型之后使用对象的全部功能。</strong></li>\n<li>强制类型转换前可以通过 instanceof 关键字进行判断，例：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Student</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>综上所述：\n<ul>\n<li>只能在继承层次内进行强制类型转换。</li>\n<li>在将超类转换为子类之前，应该使用 instanceof 进行检查</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"523-相等性测试与继承\"><a class=\"markdownIt-Anchor\" href=\"#523-相等性测试与继承\">#</a> 5.2.3 - 相等性测试与继承</h1>\n<h2 id=\"java语言规范要求-equals-方法具有下面的特性\"><a class=\"markdownIt-Anchor\" href=\"#java语言规范要求-equals-方法具有下面的特性\">#</a> Java 语言规范要求 equals 方法具有下面的特性：</h2>\n<ol>\n<li>** 自反性：** 对于任何非空引用 x， <code>x.equals(x)</code>  应该返回 true；</li>\n<li>** 对称性：** 对于任何引用 x 和 y，<strong>当且仅当</strong>  <code>y.equals(x)</code>  返回 true 时， <code>x.equals</code>  返回 true；</li>\n<li>** 传递性：** 对于任何非空引用 x、y 和 z，如果   <code>x.equals(y)</code>  返回 true， <code>y.equals(z)</code>  返回 true 时， <code>x.equals(z)</code>  也应该返回 true；</li>\n<li>** 一致性：** 如果 x 和 y 引用的对象没有发生变化，反复调用  <code>x.equals(y)</code>  应该返回同样的结果。</li>\n<li>对于任意非空引用 x， <code>x.equals(null)</code>  应该返回 false；</li>\n</ol>\n<p>不过，就对称性而言，当参数（隐式参数和显式参数）不属于同一个类的时候会有一些微妙的结果，例如下面这个调用：</p>\n<p><code>e.equals(m)</code></p>\n<p>这里的 e 的确是一个 Employee 对象，m 是一个 Manager 对象（Manager 是 Employee 子类）并且两个对象具有相同的姓名、薪水、雇佣日期 **。如果在 Employee.equals 中 使用 instanceof 进行检测，这个调用将返回 true。这意味着反过来调用 <strong> <code>**m.equals(e)**</code> </strong> 也需要返回 true**，这就使得 Manager 类收到了束缚。Manager 的 equals 方法必须愿意将自己与任何 Employee 对象进行比较，而<strong>不考虑</strong> Manager 类特有的信息。</p>\n<h3 id=\"所以现在看来有两种情况\"><a class=\"markdownIt-Anchor\" href=\"#所以现在看来有两种情况\">#</a> 所以现在看来有两种情况：</h3>\n<ul>\n<li><strong>如果子类可以有自己的相等性概念，则对称性需求将强制使用 getClass 检测。</strong></li>\n<li><strong>如果由超类决定相等性概念，那么就可以使用 instanceof 检测，并且应该将此 equals 方法声明为 final，这样可以在不同子类的对象之间进行相等性比较。</strong></li>\n</ul>\n<h2 id=\"下面给出编写一个完美的-equals-方法的建议\"><a class=\"markdownIt-Anchor\" href=\"#下面给出编写一个完美的-equals-方法的建议\">#</a> 下面给出编写一个完美的 equals 方法的建议：</h2>\n<ol>\n<li>显式参数命名为 otherObject ，稍后需要将他强制转换为另一个名为 other 的变量</li>\n<li>检测 this 与 otherObject 是否相等： <code>if (this == otherObject) return true;</code> –&gt; <strong>因为检查身份比逐个比较字段开销小。</strong></li>\n<li><strong>检测 otherObject 是否为 null</strong>，如果为 null，返回 false。这项检测是很必要的。 <code>if (otherObject == null) retuen false;</code></li>\n<li><strong>比较 this 与 otherObject 的类。</strong>\n<ul>\n<li><strong>如果 equals 的语义可以在子类中改变，就使用 getClass 检测：</strong> <code>**if (getClass() != otherObject.getClass()) return false;**</code></li>\n<li><strong>如果所有的子类都具有相同的相等性语义，可以使用 instanceof 检测：</strong> <code>**if (! (otherObject instanceof ClassName)) return false;**</code></li>\n</ul>\n</li>\n<li>将 otherObject 强制转换为相应类类型的变量： <code>ClassName other = (ClassName) otherObject;</code></li>\n<li><strong>现在根据相等性概念的要求来比较字段。</strong>\n<ul>\n<li>使用 == 比较基本类型字段.</li>\n<li>使用 Objects.equals 比较对象字段。如果所有的字段都匹配，就返回 true；否则返回 false。</li>\n</ul>\n</li>\n</ol>\n<p>** 提示：** 对于数组类型的字段，可以使用静态的  <code>**Arrays.equals()**</code>  方法检测相应数组是否相等。</p>\n<h1 id=\"524-hashcode-方法\"><a class=\"markdownIt-Anchor\" href=\"#524-hashcode-方法\">#</a> 5.2.4 - hashCode 方法</h1>\n<p><strong>注意：</strong></p>\n<ul>\n<li>String 类的 hashCode 方法是根据<strong>字符串内容</strong>得到的。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK 1.8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            h <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> h <span class=\"token operator\">+</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        hash <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>而 Object 类的默认 hashCode 方法会从<strong>对象的存储地址</strong>得出 散列码。</li>\n<li>如果<strong>重新定义了 equals 方法</strong>，那么就必须为用户可能插入散列表的对象<strong>重新定义 hashCode 方法</strong>。</li>\n<li>最好使用 null 安全的  <code>**Objects.hashCode()**</code>  ，若传入了 null，那么这个方法会返回 0；</li>\n<li>需要多个组合多个散列值时，可以调用  <code>**Object.hash**</code>  并提供所有这些参数。</li>\n<li>equals 方法与 hashCode 的定义必须相容：** 如果 <strong> <code>**x.equals(y)**</code> </strong> 返回 true，那么 <strong> <code>**x.hashCode()**</code> </strong> 就必须与 <strong> <code>**y.hashCode()**</code> </strong> 返回相同的值。** 特别的，数组可以使用  <code>Arrays.hashCode()</code>  得到散列码，这个散列码由数组元素的散列码组成。</li>\n</ul>\n<h1 id=\"525-tostring-的小优化\"><a class=\"markdownIt-Anchor\" href=\"#525-tostring-的小优化\">#</a> 5.2.5 - toString () 的小优化</h1>\n<ul>\n<li>最好通过  <code>getClass().getName()</code>  获得类名，而不要将类名硬编码到 toString 方法中。这样做的好处是：子类调用 toString 方法时也可以根据动态绑定机制显示出正确的类名。</li>\n<li>调试程序时更好的解决办法是调用  <code>Logger.global.info()</code>  , 这个饼等 7.x 再补。</li>\n</ul>\n<h1 id=\"54-基本类型包装类\"><a class=\"markdownIt-Anchor\" href=\"#54-基本类型包装类\">#</a> 5.4 - 基本类型包装类</h1>\n<ul>\n<li>包装类是<strong>不可变的</strong>，即一旦构造了包装器，就不允许更改在其中的值。</li>\n<li><strong>自动装箱 与 自动拆箱 是编译器的工作</strong>。编译器会自动的插入一条对象拆箱和对象装箱的指令。</li>\n<li><strong>自动装箱规范要求 boolean、type、char &lt;= 127，介于 -128 和 127 之间的 short 和 int 被包装到固定的对象中。Integer 中源码如下：</strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>返回一个表示指定 int 值的 Integer 实例。如果不需要新的 Integer 实例，则通常应优先使用此方法而不是构造函数 Integer (int) ，因为此方法可能会通过缓存频繁请求的值来显着提高空间和时间性能。此方法将始终缓存 -128 到 127（含）范围内的值，并且可能缓存此范围之外的其他值。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>参形：i - 一个 int 值。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>返回值：表示 i 的 Integer 实例。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>自：1.5</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断是否在 规范 规定的缓存范围内 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 从缓存中取出值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token keyword\">return</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//new 一个新的对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而缓存范围的上限是可以通过 ** 添加 JVM 启动参数（-Djava.lang.Integer.IntegerCache.high=256 [当然不一定是 256，可以是其他值]）** 进行修改的，原因在 Integer 的内部类 IntegerCache 中。IntegerCache 中静态代码块源码如下：</p>\n<h1 id=\"58-继承的设计技巧\"><a class=\"markdownIt-Anchor\" href=\"#58-继承的设计技巧\">#</a> 5.8 - 继承的设计技巧</h1>\n<ol>\n<li>将<strong>公共操作和字段</strong>放在超类中。</li>\n<li><strong>不要使用受保护 (protected) 的字段</strong>。\n<ul>\n<li>protect 机制不能够带来更多的保护。\n<ul>\n<li>子类集合是无限制的，任何一个人都能够有你的类派生一个子类，然后编写代码直接访问 protect 字段，从而<strong>破坏了封装性。</strong></li>\n<li>在 Java 中，同一个包下的类都可以访问 protect 字段，而不管他们是否为这个类的子类。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>使用继承实现 &quot;is - a&quot; 关系</strong>\n<ul>\n<li>例如需要定义一个 Contractor（钟点工）的类，钟点工有姓名、雇佣日期，但是没有月薪，他们按小时计薪，且没有奖金。这似乎在引导我们由 Employee 类派生出 Contractor 类，然后增加 hourlyWage 字段。但实际上这样的话，Constractor 类会同时存在 时薪与月薪这两个字段，且钟点工不应该拥有 奖金 字段。这会在实现打印薪水的方法时带来很多问题。</li>\n</ul>\n</li>\n<li></li>\n</ol>\n<h2 id=\"除非所有的继承方法都有意义否则不要使用继承\"><a class=\"markdownIt-Anchor\" href=\"#除非所有的继承方法都有意义否则不要使用继承\">#</a> <strong>除非所有的继承方法都有意义，否则不要使用继承。</strong></h2>\n<ol start=\"5\">\n<li><strong>在覆盖方法时，不要改变预期的行为。</strong></li>\n<li><strong>使用多态，而不要使用类型信息。</strong></li>\n<li><strong>不要滥用反射。</strong></li>\n</ol>\n<h1 id=\"611-比较两者之间的大小或者内容的方法都应该遵循对称性原则\"><a class=\"markdownIt-Anchor\" href=\"#611-比较两者之间的大小或者内容的方法都应该遵循对称性原则\">#</a> 6.1.1 - 比较两者之间的大小或者内容的方法都应该遵循对称性原则</h1>\n<p>如：<a href=\"#5-2-3\">5.2.3 - 相等性测试与继承</a></p>\n<p><strong>归纳：</strong></p>\n<ul>\n<li>compareTo()</li>\n<li>compare()</li>\n<li>equals()</li>\n</ul>\n<h1 id=\"614-java-9-新特性\"><a class=\"markdownIt-Anchor\" href=\"#614-java-9-新特性\">#</a> 6.1.4 - Java 9 新特性</h1>\n<p>在 Java 9 中，接口的方法可以是 private。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th>private</th>\n<th>protect</th>\n<th>public</th>\n<th>static</th>\n<th>final</th>\n<th>abstract</th>\n<th>默认修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>接口</td>\n<td>方法</td>\n<td>√ （Java 9 +）</td>\n<td>\\</td>\n<td>√</td>\n<td>√ （Java 8 +）</td>\n<td>\\</td>\n<td>√</td>\n<td>public abstract</td>\n</tr>\n<tr>\n<td></td>\n<td>变量</td>\n<td>\\</td>\n<td>\\</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>\\</td>\n<td>public static final</td>\n</tr>\n<tr>\n<td>抽象类</td>\n<td>方法</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>\\</td>\n</tr>\n<tr>\n<td></td>\n<td>变量</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>\\</td>\n<td>\\</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"616-解决默认方法冲突\"><a class=\"markdownIt-Anchor\" href=\"#616-解决默认方法冲突\">#</a> 6.1.6 - 解决默认方法冲突</h1>\n<ol>\n<li>问题：如果类 A 继承的 B 类中有一个方法 getName ()，实现的接口 C 中也有一个 默认方法 getName ()，此时类 A 同时含有 B 类的 getName ()，C 接口的 getName ()，会发生什么情况？</li>\n</ol>\n<ul>\n<li>** 超类优先。** 接口中的 getName () 会被忽略。</li>\n<li>** 注：** 千万不要让一个 默认方法 重新定义 Object 类中的方法。</li>\n</ul>\n<ol start=\"2\">\n<li>问题：如果类 A 实现的 B、C 两个接口中都含有同名的默认方法，会发生什么？</li>\n</ol>\n<ul>\n<li>** 接口冲突。** 编译器会报告一个错误，让程序员来解决这个二义性问题。解决办法：在 A 中重写此方法。</li>\n<li>** 注：** 另外的，假设 B 接口中的方法不是默认方法，只是一个 抽象方法与 C 接口重名了，那么编译器也会报告此错误。</li>\n</ul>\n<h1 id=\"619-对象克隆\"><a class=\"markdownIt-Anchor\" href=\"#619-对象克隆\">#</a> 6.1.9 - 对象克隆</h1>\n<p>发现大佬写的非常清晰：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vUWlhbjEyMy9wLzU3MTA1MzMuaHRtbA==\">Java 提高篇 —— 对象克隆（复制） - 萌小 Q - 博客园 (cnblogs.com)</span></p>\n<h1 id=\"626-lambda-表达式中的变量作用域\"><a class=\"markdownIt-Anchor\" href=\"#626-lambda-表达式中的变量作用域\">#</a> 6.2.6 - lambda 表达式中的变量作用域</h1>\n<p>12 章见。</p>\n<h1 id=\"627-常用函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#627-常用函数式接口\">#</a> 6.2.7 - 常用函数式接口</h1>\n<h2 id=\"常用函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#常用函数式接口\">#</a> 常用函数式接口</h2>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>抽象方法名</th>\n<th>描述</th>\n<th>其他方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Runable</td>\n<td>\\</td>\n<td>void</td>\n<td>run</td>\n<td>作为无参数或返回值的动作运行</td>\n<td></td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>\\</td>\n<td>T</td>\n<td>get</td>\n<td>提供一个 T 类型的值</td>\n<td></td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>T</td>\n<td>void</td>\n<td>accept</td>\n<td>处理一个 T 类型的值</td>\n<td>andThen</td>\n</tr>\n<tr>\n<td>BiConsumer&lt;T, U&gt;</td>\n<td>T, U</td>\n<td>void</td>\n<td>accept</td>\n<td>处理 T 和 U 类型的值</td>\n<td>andThen</td>\n</tr>\n<tr>\n<td>Function&lt;T, R&gt;</td>\n<td>T</td>\n<td>R</td>\n<td>apply</td>\n<td>有一个 T 类型参数的函数</td>\n<td>compose, andThen, identity</td>\n</tr>\n<tr>\n<td>BiFunction&lt;T, U, R&gt;</td>\n<td>T, U</td>\n<td>R</td>\n<td>apply</td>\n<td>有一个 T 和 U 类型的参数</td>\n<td>andThen</td>\n</tr>\n<tr>\n<td>UnaryOperate<T></td>\n<td>T</td>\n<td>T</td>\n<td>apply</td>\n<td>类型 T 上的一元操作符</td>\n<td>compose, andThen, identity</td>\n</tr>\n<tr>\n<td>BinaryOperate<T></td>\n<td>T, T</td>\n<td>T</td>\n<td>apply</td>\n<td>类型 T 上的二元操作符</td>\n<td>andThen, maxBy, minBy</td>\n</tr>\n<tr>\n<td>Predicate<T></td>\n<td>T</td>\n<td>boolean</td>\n<td>test</td>\n<td>布尔值函数</td>\n<td>and, or, negate, isEqual</td>\n</tr>\n<tr>\n<td>BiOredicate&lt;T, U&gt;</td>\n<td>T, U</td>\n<td>boolean</td>\n<td>test</td>\n<td>有两个参数的布尔值函数</td>\n<td>and, or, negate</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"基本类型的函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#基本类型的函数式接口\">#</a> 基本类型的函数式接口</h2>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>抽象方法名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BooleanSupplier</td>\n<td>\\</td>\n<td>boolean</td>\n<td>getAsBoolean</td>\n</tr>\n<tr>\n<td>PSupplier</td>\n<td>\\</td>\n<td>p</td>\n<td>getAsP</td>\n</tr>\n<tr>\n<td>PConsumer</td>\n<td>p</td>\n<td>void</td>\n<td>accept</td>\n</tr>\n<tr>\n<td>ObjPConsumer<T></td>\n<td>T, p</td>\n<td>void</td>\n<td>accept</td>\n</tr>\n<tr>\n<td>PFunction<T></td>\n<td>p</td>\n<td>T</td>\n<td>apply</td>\n</tr>\n<tr>\n<td>PToQFunction</td>\n<td>p</td>\n<td>q</td>\n<td>applyAsQ</td>\n</tr>\n<tr>\n<td>ToPFunction<T></td>\n<td>T</td>\n<td>p</td>\n<td>applyAsP</td>\n</tr>\n<tr>\n<td>ToPBiFunction&lt;T, U&gt;</td>\n<td>T, U</td>\n<td>p</td>\n<td>applyAsP</td>\n</tr>\n<tr>\n<td>PUnaryOperate</td>\n<td>p</td>\n<td>p</td>\n<td>applyAsP</td>\n</tr>\n<tr>\n<td>PBinaryOperate</td>\n<td>p, p</td>\n<td>p</td>\n<td>applyAsP</td>\n</tr>\n<tr>\n<td>PPredicate</td>\n<td>p</td>\n<td>boolean</td>\n<td>test</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"b88918dc-2\"></a></p>\n<h3 id=\"注-3\"><a class=\"markdownIt-Anchor\" href=\"#注-3\">#</a> 注：</h3>\n<ul>\n<li><strong>p、q 是 int、long、double；P、Q 是 Int、Long、Double</strong></li>\n<li>@FunctionalInterface 注解标记函数式接口</li>\n</ul>\n<h1 id=\"631-~-634-为什么内部类可以访问外部类的变量\"><a class=\"markdownIt-Anchor\" href=\"#631-~-634-为什么内部类可以访问外部类的变量\">#</a> 6.3.1 ~ 6.3.4 为什么内部类可以访问外部类的变量？</h1>\n<ul>\n<li>内部类的对象中总有一个隐式引用，指向创建它的外部类对象。</li>\n<li>外部类的引用在构造器中设置。编译器会修改所有内部类构造器，添加一个对应外部类引用的参数。生成的代码如下所示：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Outer</span> outer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outer <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试代码\"><a class=\"markdownIt-Anchor\" href=\"#测试代码\">#</a> 测试代码：</h2>\n<p><a name=\"OuterTest01.java\"></a></p>\n<h3 id=\"outertest01java\"><a class=\"markdownIt-Anchor\" href=\"#outertest01java\">#</a> OuterTest01.java</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">inner_outer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author: Ding</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date: 2022/5/15</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @modify:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterTest01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">OuterTest01</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterTest01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        o<span class=\"token punctuation\">.</span><span class=\"token function\">invokeInnerMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInnerMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">void</span> <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a name=\"OuterTest01.class\"></a></p>\n<h3 id=\"outertest01class\"><a class=\"markdownIt-Anchor\" href=\"#outertest01class\">#</a> OuterTest01.class</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// (powered by FernFlower decompiler)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">inner_outer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterTest01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OuterTest01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">OuterTest01</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterTest01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        o<span class=\"token punctuation\">.</span><span class=\"token function\">invokeInnerMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInnerMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">InnerA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">void</span> <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OuterTest01</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 通过 javap -private OuterTest01 命令也可以查看内部类的情况</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInnerMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 编译器自动生成的一个静态方法，名字可能是 access$0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> access$<span class=\"token function\">000</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"outertest011inneraclass\"><a class=\"markdownIt-Anchor\" href=\"#outertest011inneraclass\">#</a> OuterTest01$1InnerA.class</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// (powered by FernFlower decompiler)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">inner_outer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterTest01</span>$<span class=\"token number\">1</span>InnerA <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">OuterTest01</span>$<span class=\"token function\">1InnerA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OuterTest01</span> <span class=\"token keyword\">this</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span>$<span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OuterTest01</span><span class=\"token punctuation\">.</span>access$<span class=\"token function\">000</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 通过 javap -private OuterTest01$1InnerA 命令也可以查看内部类的情况</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span>$<span class=\"token number\">1</span>InnerA <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 编译器创建的指向外部类的实例字段</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span> <span class=\"token keyword\">this</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 有参构造器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span>$<span class=\"token function\">1InnerA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">inner_outer<span class=\"token punctuation\">.</span></span>OuterTest01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 成员方法</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a name=\"b88918dc-3\"></a></p>\n<h2 id=\"注-4\"><a class=\"markdownIt-Anchor\" href=\"#注-4\">#</a> 注：</h2>\n<ul>\n<li>内部类引用外部类的成员变量的语法规则是： <code>**OuterTest01.this.num**</code></li>\n<li>外部类的作用域之外引用内部类的语法规则： <code>**OuterTest01.InnerA**</code></li>\n<li>内部类声明的所有<strong>静态变量都必须是 final</strong></li>\n<li>内部类会在编译时被转换为一个常规类，并自动命名，类似于  <code>OuterTest01$InnerA</code>  ，也就是说这是编译器的工作，JVM 并不知道。运行时会将内部类当作一个常规类来处理。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>那么问题来了，运行时虚拟机如何知道哪个类是内部类？并使其内部类可以直接访问到外部类的私有成员变量而不需要创建对象？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>—— 再看看我们通过命令查看的  <code>OuterTest01</code>  类的情况，其中有一个编译器生成的静态方法： <code>**static int access$000(inner_outer.OuterTest01);**</code>     这个静态方法会被内部类中的语句这样调用  <code>**OuterTest01.access$000(this.this$0)**</code>  ，参数就是编译器生成的有参构造器中传入的外部类对象，返回值就是所需要的变量。所以，** 每调用一个变量就会生成这样一个静态方法。** 只是在名字的’$' 后的数字上有所差别。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"634-局部内部类如何访问到方法中的显式参数\"><a class=\"markdownIt-Anchor\" href=\"#634-局部内部类如何访问到方法中的显式参数\">#</a> 6.3.4 - 局部内部类如何访问到方法中的显式参数？</h1>\n<ul>\n<li>实际上，<strong>编译器会自动的生成一个包含所有显式参数的构造器</strong>，并通过这个构造器进行赋值。这里是不是似曾相识？？对，上一节中的内部类访问外部类的变量时也是通过构造器传入了一个外部类的对象来使内部类中有一个引用指向外部类。<strong>这里会把两个构造器合并，一次性的将外部类对象和显式参数都传入构造器以达到赋值。</strong></li>\n</ul>\n<p>那么显式参数赋值给谁呢？？</p>\n<ul>\n<li>编译器也会<strong>自动生成显式参数所一一对应的成员变量</strong>，并且加以 <strong>final</strong> 修饰。</li>\n</ul>\n<h1 id=\"636-关于匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#636-关于匿名内部类\">#</a> 6.3.6 - 关于匿名内部类</h1>\n<p>所有的类都有构造器？</p>\n<ul>\n<li>相信很多人的第一想法是：所有的类都是 Object 的子类，所以默认会有一个无参构造器，那么答案很明显是<strong>错误的。</strong></li>\n<li>匿名内部类没有构造器，书上的原话是：</li>\n</ul>\n<blockquote>\n<p>由于构造器的名字必须与类名相同，而匿名内部类没有类名，所以，匿名内部类不能有构造器。</p>\n</blockquote>\n<ul>\n<li>所以匿名内部类也不会被编译为一个单独存在的类，因为他没有类名。</li>\n</ul>\n<h2 id=\"小技巧\"><a class=\"markdownIt-Anchor\" href=\"#小技巧\">#</a> 小技巧：</h2>\n<ul>\n<li>在匿名内部类中生成日志或者调试信息时，通常希望包含当前类的类名，所以可以这样： <code>this.getClass()</code></li>\n<li>但静态方法没有 this，所以应该使用： <code>**new Object() &#123;&#125;.getClass().getEnclosing()**</code> ，其中 <code>getEnclosing()</code>  得到外部类，也就是包含这个静态方法的类。</li>\n</ul>\n<h1 id=\"637-关于静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#637-关于静态内部类\">#</a> 6.3.7 - 关于静态内部类</h1>\n<blockquote>\n<p>有时候，使用内部类只是为了把一个类隐藏在另外一个类的内部，并不需要内部类有外围类的一个引用。为此，可以把内部类声明为 static，这样就不会生成那个引用。</p>\n</blockquote>\n<h2 id=\"为什么静态内部类不会生成对外部类的引用\"><a class=\"markdownIt-Anchor\" href=\"#为什么静态内部类不会生成对外部类的引用\">#</a> 为什么静态内部类不会生成对外部类的引用？</h2>\n<ul>\n<li>静态内部类是 static 修饰的，只能访问外部类的静态变量，而静态变量可以通过  <code>类名.变量名</code>  的形式，所以不需要传入外围类的对象来引用变量。</li>\n</ul>\n<p><a name=\"b88918dc-4\"></a></p>\n<h2 id=\"注-5\"><a class=\"markdownIt-Anchor\" href=\"#注-5\">#</a> 注：</h2>\n<ul>\n<li>只要内部类不需要访问外围类对象，就应该使用静态内部类。</li>\n<li>与常规类不同，静态内部类可以有静态字段和方法。</li>\n<li>在接口中声明的内部类自动是 static 和 public</li>\n</ul>\n<h1 id=\"724-try-中的-return-和-finally-中的-return-返回谁\"><a class=\"markdownIt-Anchor\" href=\"#724-try-中的-return-和-finally-中的-return-返回谁\">#</a> 7.2.4 - try 中的 return 和 finally 中的 return 返回谁？</h1>\n<ul>\n<li><strong>try 中的 return 会被 finally 中的 return 覆盖。</strong></li>\n</ul>\n<h1 id=\"725-try-with-resource-语句-java-8\"><a class=\"markdownIt-Anchor\" href=\"#725-try-with-resource-语句-java-8\">#</a> 7.2.5 - try-with-resource 语句 （Java 8 +）</h1>\n<h2 id=\"语句格式\"><a class=\"markdownIt-Anchor\" href=\"#语句格式\">#</a> 语句格式：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twork <span class=\"token keyword\">with</span> <span class=\"token namespace\">res</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当 try 块执行完毕时，会自动调用  <code>res.close()</code>  和  <code>is.close()</code>   。</li>\n</ul>\n<blockquote>\n<p>在 Java 9 中，可以在 try 首部中提供之前声明的事实最终变量。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lines<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PrintWriter</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line <span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果 try 块抛出一个异常，而且 close 方法也抛出一个异常，这就会带来一个难题。\n<ul>\n<li>try-with-resource 语句会将原来的异常重新抛出，而 close 抛出的异常会 “被抑制 “。并由 addSuppressed 增加到原来的异常，同样的也可以通过 getSuppressed 得到” 被抑制 “的异常。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%B8%80(7.3%20_%209.5.3)/",
            "url": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%B8%80(7.3%20_%209.5.3)/",
            "title": "卷一(7.3 _ 9.5.3)",
            "date_published": "2023-09-07T09:59:14.000Z",
            "content_html": "<h1 id=\"73-使用异常的技巧\"><a class=\"markdownIt-Anchor\" href=\"#73-使用异常的技巧\">#</a> 7.3 - 使用异常的技巧</h1>\n<ol>\n<li><strong>异常处理不能代替简单的测试。</strong>\n<ul>\n<li>捕获异常所花费的时间远远超过了简单的测试。</li>\n</ul>\n</li>\n<li><strong>不要过分的细化异常</strong>\n<ul>\n<li>尽量将多条语句包含在一个 try-catch 里，然后使用多个 catch 子句，而不是每一条语句都增加一个 try-catch。</li>\n</ul>\n</li>\n<li><strong>充分利用异常层次结构</strong></li>\n<li><strong>不要压制异常</strong></li>\n<li><strong>在检测错误时，” 苛刻 “要比放任更好</strong></li>\n<li><strong>不要羞于传递异常</strong>\n<ol>\n<li>可以归纳为：早抛出，晚捕获。类似于 Web 项目中 DAO 层的异常需要抛到 Service 层进行处理</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"741-assert-之断言\"><a class=\"markdownIt-Anchor\" href=\"#741-assert-之断言\">#</a> 7.4.1 - assert 之断言</h1>\n<ul>\n<li><code>assert condition</code></li>\n<li><code>assert condition : expression</code></li>\n</ul>\n<blockquote>\n<p>这两个语句都会计算条件，如果结果为 false ，则抛出一个 AssertionError 异常。在第二个语句中，表达式将传入 AssertError 对象的构造器，并转换为一个消息字符串。</p>\n</blockquote>\n<h1 id=\"742-断言的开启和禁用\"><a class=\"markdownIt-Anchor\" href=\"#742-断言的开启和禁用\">#</a> 7.4.2 - 断言的开启和禁用</h1>\n<ul>\n<li>断言默认是关闭的，可以通过以下方式来开启断言：（启用或禁用断言是类加载器的功能，所以不需要重新编译）\n<ul>\n<li>运行时用  <code>-enableassertions</code>  或  <code>-ea</code>  选项启用断言。如： <code>java -enableassertions MyApp</code></li>\n<li>也可以在某个类中或整个包中启用断言。例如： <code>java -ea:MyClass -ea:com.mycompany.mylib MyApp</code>  ，这条命令将为 MyClass 类以及 com.mycompany.mylib 包和他的子包中的所有类打开断言。选项 -ea 将打开无名包中所有类的断言。</li>\n<li>也可以使用  <code>-diableassertions</code>  或  <code>-da</code>  在某个特定类和包中禁用断言。</li>\n</ul>\n</li>\n<li><strong>通过类加载器的方法来开启或禁用断言：</strong>\n<ul>\n<li><code>**public void setDefaultAssertionStatus(boolean enabled)**</code>\n<ul>\n<li>设置此类加载器的默认断言状态。此设置确定由此类加载器加载并在将来初始化的类是否默认启用或禁用断言。通过调用  <code>setPackageAssertionStatus(String, boolean)</code>  或  <code>setClassAssertionStatus(String, boolean)</code>  可以在每个包或每个类的基础上覆盖此设置。</li>\n<li>参形：enabled - 如果此类加载器加载的类今后将默认启用断言，则为 true ；如果默认情况下禁用断言，则为 false。</li>\n</ul>\n</li>\n<li><code>**public void setClassAssertionStatus(String className, boolean enabled)**</code>\n<ul>\n<li>为此类加载器中的命名顶级类和其中包含的任何嵌套类设置所需的断言状态。此设置优先于类加载器的默认断言状态，以及任何适用的每个包的默认值。如果命名类已经初始化，则此方法无效。 （一旦一个类被初始化，它的断言状态就不能改变。）如果命名类不是顶级类，则此调用不会影响任何类的实际断言状态。</li>\n<li>参形：className – 要设置其断言状态的顶级类的完全限定类名。enabled - 如果命名类在初始化时（并且如果）启用断言，则为 true ，如果类要禁用断言，则为 false。</li>\n</ul>\n</li>\n<li><code>**public void setPackageAssertionStatus(String packageName, boolean enabled) &#123;**</code>\n<ul>\n<li>设置命名包的包默认断言状态。包默认断言状态决定了将来初始化的属于指定包或其任何 “子包” 的类的断言状态。名为 p 的包的子包是名称以 “ p. ” 开头的任何包。例如 javax.swing.text 是 javax.swing 的子包， java.util 和 java.lang.reflect 都是 java 的子包。如果多个包默认值适用于给定类，则属于最特定包的包默认值优先于其他包。例如，如果 javax.lang 和 javax.lang.reflect 都有与之关联的包默认值，则后一个包默认值适用于 javax.lang.reflect 中的类。包默认值优先于类加载器的默认断言状态，并且可以通过调用 setClassAssertionStatus (String, boolean) 在每个类的基础上被覆盖。</li>\n<li>参形：packageName – 要设置其包默认断言状态的包的名称。空值表示 “当前” 的未命名包（请参阅 The Java™ Language Specification 的第 7.4.2 节。）enabled –如果类加载器加载并属于命名包或其任何子包的类默认启用断言，则为 true，如果默认禁用断言，则为 false 。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注\"><a class=\"markdownIt-Anchor\" href=\"#注\">#</a> 注：</h2>\n<ul>\n<li>断言关闭了也会被编译进 class 文件，只是不起作用。不知道为啥。开启断言和未开启断言的程序在编译后的字节码文件也看不出区别。</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215722.jpg\" alt=\"\"></p>\n<h1 id=\"743-使用断言完成参数检查\"><a class=\"markdownIt-Anchor\" href=\"#743-使用断言完成参数检查\">#</a> 7.4.3 - 使用断言完成参数检查</h1>\n<blockquote>\n<p>在 Java 中，给出了 3 种处理系统错误的机制：</p>\n<ul>\n<li>抛出一个异常</li>\n<li>日志</li>\n<li>使用断言</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>什么时候应该使用断言呢？</p>\n<ul>\n<li>断言失败是致命的、不可恢复的错误。</li>\n<li><strong>断言检查只是在开发和测试阶段打开</strong>（这种做法有时候被戏称为 “在靠进海岸时穿上救生衣，但在海里就把救生衣抛掉）。</li>\n<li><strong>断言只应该用于在测试阶段确定程序内部错误的位置。</strong></li>\n</ul>\n</blockquote>\n<h1 id=\"84-类型变量的限定\"><a class=\"markdownIt-Anchor\" href=\"#84-类型变量的限定\">#</a> 8.4 - 类型变量的限定</h1>\n<ul>\n<li><code>&lt;T extends Comparable&gt;</code>  ：表示类型变量 T 必须是 Comparable 的实现类。 如果有多个，用 &amp; 连接。</li>\n</ul>\n<h1 id=\"851-类型擦除\"><a class=\"markdownIt-Anchor\" href=\"#851-类型擦除\">#</a> 8.5.1 - 类型擦除</h1>\n<blockquote>\n<p>虚拟机没有泛型类型对象 —— 所有对象都属于普通类。</p>\n</blockquote>\n<ul>\n<li>所以类型变量会被<strong>擦除</strong>，并替换为其 <strong>限定类型</strong>，对于<strong>无限定类型的变量则替换为 Object。</strong></li>\n<li>假设限定类型有多个，例如： <code>public class Interval&lt;T extends Comparable &amp; Serializable&gt; implement Serializable &#123;//...&#125;</code>  。\n<ul>\n<li>这种情况下会用 Comparable 替换掉 T</li>\n<li>所以为了提高效率，应该将标签接口（即没有方法的接口）放在限定列表的末尾。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"852-类型擦除的额外处理\"><a class=\"markdownIt-Anchor\" href=\"#852-类型擦除的额外处理\">#</a> 8.5.2 - 类型擦除的额外处理</h1>\n<p>编译器会自动在字节码文件种为 类型擦除之后的代码中适当的插入强制类型转换。</p>\n<h1 id=\"853-转换泛型方法\"><a class=\"markdownIt-Anchor\" href=\"#853-转换泛型方法\">#</a> 8.5.3 - 转换泛型方法</h1>\n<h2 id=\"考虑一个场景\"><a class=\"markdownIt-Anchor\" href=\"#考虑一个场景\">#</a> 考虑一个场景：</h2>\n<p>当父类中有一个泛型方法（参数为泛型），而子类重写了这个方法。那么编译后，由于类型擦除，父类中的泛型参数会被修改为 Object，所以此时子类中会有两个同名的方法。</p>\n<h3 id=\"代码如下\"><a class=\"markdownIt-Anchor\" href=\"#代码如下\">#</a> 代码如下：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fanxing</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author: Ding</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date: 2022/5/19</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @description:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @modify:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FanXing01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"01 : \"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FanXing02</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FanXing01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"02 : \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods1 <span class=\"token operator\">=</span> <span class=\"token class-name\">FanXing02</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_____________________\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\">#</a> 运行结果：</h3>\n<pre><code>test : [class java.lang.String]\ntest : [class java.lang.Object]\nwait : []\nwait : [long, int]\nwait : [long]\nequals : [class java.lang.Object]\ntoString : []\nhashCode : []\ngetClass : []\nnotify : []\nnotifyAll : []\n_____________________\ntest : [class java.lang.String]\nwait : []\nwait : [long, int]\nwait : [long]\nequals : [class java.lang.Object]\ntoString : []\nhashCode : []\ngetClass : []\nnotify : []\nnotifyAll : []\n</code></pre>\n<h3 id=\"代码截图\"><a class=\"markdownIt-Anchor\" href=\"#代码截图\">#</a> 代码截图：</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215724.jpg\" alt=\"\"></p>\n<h3 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明：</h3>\n<p>可以看到，泛型类的子类重写父类的反方法之后，子类会有两个 test 方法，这感觉更像是重载并非重写。这就是类型擦除与多态发生了冲突。为了解决这个问题，编译器会在 FanXIng002 中生成一个<strong>桥方法。</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215727.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215730.jpg\" alt=\"\"></p>\n<p><strong>此方法就是编译器生成的桥方法。</strong></p>\n<h2 id=\"那么再考虑一个场景\"><a class=\"markdownIt-Anchor\" href=\"#那么再考虑一个场景\">#</a> 那么再考虑一个场景：</h2>\n<p>还是类似的，父类中的方法里面，返回值是泛型，那么子类覆盖这个方法会发生什么？父类的泛型擦除了变成 Object，子类覆盖的方法名和方法参数将和父类一模一样，只是返回值不同。</p>\n<p><a name=\"a29e1c5e-1\"></a></p>\n<h3 id=\"代码如下-2\"><a class=\"markdownIt-Anchor\" href=\"#代码如下-2\">#</a> 代码如下：</h3>\n<p>较上个代码片段增加了两个 get ()</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fanxing</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author: Ding</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date: 2022/5/19</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @description:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @modify:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FanXing01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"01 : \"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FanXing02</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FanXing01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"02 : \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods1 <span class=\"token operator\">=</span> <span class=\"token class-name\">FanXing02</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : return \"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_____________________\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a name=\"d3ca7e34-1\"></a></p>\n<h3 id=\"运行结果-2\"><a class=\"markdownIt-Anchor\" href=\"#运行结果-2\">#</a> 运行结果：</h3>\n<pre><code>get : return class java.lang.Object  []\nget : return class java.lang.String  []\ntest : return void  [class java.lang.String]\ntest : return void  [class java.lang.Object]\nwait : return void  []\nwait : return void  [long, int]\nwait : return void  [long]\nequals : return boolean  [class java.lang.Object]\ntoString : return class java.lang.String  []\nhashCode : return int  []\ngetClass : return class java.lang.Class  []\nnotify : return void  []\nnotifyAll : return void  []\n_____________________\ntest : [class java.lang.String]\nwait : []\nwait : [long, int]\nwait : [long]\nequals : [class java.lang.Object]\ntoString : []\nhashCode : []\ngetClass : []\nnotify : []\nnotifyAll : []\n</code></pre>\n<p><a name=\"6e5b9607-1\"></a></p>\n<h3 id=\"说明-2\"><a class=\"markdownIt-Anchor\" href=\"#说明-2\">#</a> 说明：</h3>\n<p>可以看到，此时 子类中有两个方法签名相同的方法，只是返回值不同。</p>\n<blockquote>\n<p>这样的方法是不合法的，但在虚拟机中，会由参数类型和返回类型共同指定一个方法。因此，编译器可以为两个仅返回类型不同的方法生成字节码，虚拟机能够争取恶的处理这种情况。</p>\n</blockquote>\n<p><a name=\"b88918dc-1\"></a></p>\n<h2 id=\"注-2\"><a class=\"markdownIt-Anchor\" href=\"#注-2\">#</a> 注：</h2>\n<blockquote>\n<p>桥方法不仅用于泛型类型。一个方法覆盖另一个方法时可以指定一个更严格的返回类型，这是合法的。</p>\n</blockquote>\n<p>看来这就是桥方法的作用了？</p>\n<blockquote>\n<p>Object.clone () 和 Employee.clone () 方法呗成为有协变的返回类型。实际上，Employee 方法有两个克隆方法：</p>\n<p>Employee clone () // 自定义的 clone 方法</p>\n<p>Object clone () // 编译器生成的桥方法，继承自 Object.clone ()</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h2>\n<ul>\n<li>Java 中重写父类的方法分两种情况：\n<ul>\n<li>方法返回值类型比父类更严格：编译器自动生成一个<strong>桥方法</strong>去真正重写父类的方法，并调用被 @Override 标注的 ” 重写 “ 的方法。</li>\n<li>方法返回值和父类相同：直接重写，没有需要强调的。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"86-限制与局限性\"><a class=\"markdownIt-Anchor\" href=\"#86-限制与局限性\">#</a> 8.6 - 限制与局限性</h1>\n<h2 id=\"861-不能使用基本类型实例化类型参数\"><a class=\"markdownIt-Anchor\" href=\"#861-不能使用基本类型实例化类型参数\">#</a> 8.6.1 - 不能使用基本类型实例化类型参数</h2>\n<ul>\n<li>因为泛型擦除后是 Object，而 Object 不能存储八种基本数据类型。</li>\n</ul>\n<h2 id=\"862-运行时类型查询只适用于原始类型\"><a class=\"markdownIt-Anchor\" href=\"#862-运行时类型查询只适用于原始类型\">#</a> 8.6.2 - 运行时类型查询只适用于原始类型</h2>\n<p><code>if (a instanceof Pair&lt;String&gt;)</code>  // <strong>ERROR</strong></p>\n<p><code>if (a instanceof Pair&lt;T&gt;)</code>  // <strong>ERROR</strong></p>\n<h2 id=\"863-不能创建参数化类型的数组\"><a class=\"markdownIt-Anchor\" href=\"#863-不能创建参数化类型的数组\">#</a> 8.6.3 - 不能创建参数化类型的数组</h2>\n<p><code>Pair&lt;String&gt;[] table = new Pair&lt;&gt;[];</code>  // <strong>ERROR</strong></p>\n<ul>\n<li>但是可以另辟蹊径： <code>FanXing01&lt;String&gt;[] fanXing01s = (FanXing01&lt;String&gt;[]) new FanXing01&lt;?&gt;[10];</code>  但结果将是不安全的，例如： <code>var table = (Pair&lt;String&gt;[]) new Pair&lt;?&gt;[]&#123;new Pair&lt;Integer&gt;(1, 2), new Pair&lt;String&gt;(&quot;1&quot;, &quot;2&quot;)&#125;;</code>  将对象显示声明在数组中只是为了方便，实际情况中很有可能接收到类型参数不一样的 Pair 对象，那时就将收获一个类型转换异常。</li>\n</ul>\n<h2 id=\"865-不能直接实例化类型变量\"><a class=\"markdownIt-Anchor\" href=\"#865-不能直接实例化类型变量\">#</a> 8.6.5 - 不能直接实例化类型变量</h2>\n<ul>\n<li><code>T t = new T();</code>  // <strong>ERROR</strong></li>\n<li>间接方法：\n<ul>\n<li>让调用者提供一个构造器表达式，例如： <code>Pair&lt;String&gt; p = Pair.makePair(String::new);</code>  ，其中 makePair 方法接收一个 Suppliers<T>，这是一个函数式接口。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">makePair</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> constr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>constr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>反射创建对象。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">makePair</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> cl<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Par</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"866-不能直接构造泛型数组\"><a class=\"markdownIt-Anchor\" href=\"#866-不能直接构造泛型数组\">#</a> 8.6.6 - 不能直接构造泛型数组</h2>\n<p><code>T[] t = new T[2]</code>  // <strong>ERROR</strong></p>\n<ul>\n<li>构造泛型数组的间接方法：\n<ul>\n<li>让用户提供一个数组构造器表达式： <code>String[] names2 = ArrayAlg.minmax(String[]::new, &quot;ABC&quot;, &quot;BCD&quot;);</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">pair2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Cay Horstmann</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @version 1.02 2015-06-21</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PairTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names1 <span class=\"token operator\">=</span> <span class=\"token class-name\">ArrayAlg</span><span class=\"token punctuation\">.</span><span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntFunction</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names2 <span class=\"token operator\">=</span> <span class=\"token class-name\">ArrayAlg</span><span class=\"token punctuation\">.</span><span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayAlg</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 获取类型为 T 的对象数组的最小值和最大值。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @param a T 类型的对象数组</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @return 具有最小值和最大值的对，如果 a 为 null 或为空，则为 null</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntFunction</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> constr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> constr<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用传统的反射创建对象： <code>Array.newInstance(a.getClass().getComponentType(), 2);</code></li>\n</ul>\n<h2 id=\"867-泛型类的静态上下文中类型变量无效\"><a class=\"markdownIt-Anchor\" href=\"#867-泛型类的静态上下文中类型变量无效\">#</a> 8.6.7 - 泛型类的静态上下文中类型变量无效</h2>\n<ul>\n<li>原因：在 java 中泛型只是一个占位符，必须在传递类型后才能使用。就泛型类而言，<strong>类实例化时才能传递真正的类型参数，由于静态方法的加载先于类的实例化</strong>，也就是说类中的泛型还没有传递真正的类型参数时，静态方法就已经加载完成。显然，静态方法不能使用 / 访问泛型类中的泛型。这和静态方法不能调用普通方法 / 访问普通变量类似，都是因为静态申明与非静态申明的生命周期不同。</li>\n</ul>\n<h2 id=\"868-不能抛出或捕获泛型类的实例\"><a class=\"markdownIt-Anchor\" href=\"#868-不能抛出或捕获泛型类的实例\">#</a> 8.6.8 - 不能抛出或捕获泛型类的实例</h2>\n<ul>\n<li>假设当前我们有两个类 —— SomeException<Integer> 类和 SomeException<String> 类，它们都是继承自 Throwable 类的。代码中的 doSomeStuff () 方法可能是抛出 SomeException<Integer> 异常或 SomeException<String> 异常。我们针对不同的异常做出不同的逻辑操作。这样看似完全没有问题。但是熟悉泛型的小伙伴都知道，还有一种叫做类型擦除机制的存在，何为类型擦除？此处不扩展了。通俗点说：java 中不存在泛型代码，泛型代码是写给我们看的，编译器会将泛型代码转换成普通类代码。所以无论是 SomeException<Integer> 或者是 SomeException<String> 经过编译器的类型擦除后都将会变成 SomeException。故上述代码是不可以运行的，因为当代码抛出异常时编译器是无法判断走哪个 catch 分支的，所以 java 为了避免这样的问题出现，故泛型类是无法继承自 Throwable 类的。</li>\n<li>作者：陈皮的柚子链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTU3OTg4NTE5OTQ0\">https://juejin.cn/post/6844904157988519944</span> 来源：稀土掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>\n</ul>\n<h2 id=\"8610-注意泛型擦除后的冲突\"><a class=\"markdownIt-Anchor\" href=\"#8610-注意泛型擦除后的冲突\">#</a> 8.6.10 - 注意泛型擦除后的冲突</h2>\n<p>先来看一个示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> equals <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>考虑一个  <code>Pair&lt;String&gt;</code>  ，从概念上来讲，它有两个 equals 方法： <code>boolean equals(String)</code>  和  <code>boolean equals(Object)</code></p>\n<p>但其实类型擦除后会变成： <code>boolean equals(Object)</code>  ，所以会和 Object 的 equals 冲突。</p>\n<ul>\n<li>为什么冲突？\n<ul>\n<li>因为两个方法的方法签名不同，不是重写关系。而 T 擦除后变成 Object 就和父类中的发生了冲突。</li>\n</ul>\n</li>\n<li>如何补救？\n<ul>\n<li>重新命名引发冲突的方法。</li>\n</ul>\n</li>\n</ul>\n<p>除此之外。</p>\n<blockquote>\n<p>泛型规范说明还引用了另一个原则：” 为了支持擦除转换，我们要施加一个限制：倘若两个接口类型是同意接口的不同参数化，一个类或类型变量就不能同时作为这两个接口类型的子类。“例如，下述代码是非法的：</p>\n<p><code>Comparable&lt;Employee&gt;</code>  和  <code>Comparable&lt;Manager&gt;</code>  就是同一接口的不同参数化。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Employe</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Manager</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>这可能会与合成的桥方法产生冲突，桥方法中会进行强制类型转换，所以不能在一个桥方法中使其转换为两个类型。</li>\n</ul>\n<h1 id=\"913-迭代器\"><a class=\"markdownIt-Anchor\" href=\"#913-迭代器\">#</a> 9.1.3 - 迭代器</h1>\n<blockquote>\n<p>可以认为 Java 迭代器位于两个元素之间。当调用 next 时，迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p>\n</blockquote>\n<p><strong>注：</strong></p>\n<ul>\n<li>InputStream 的 read 方法也是类似的。</li>\n<li>调用 remove 之前没有调用 next 将是不合法的。</li>\n</ul>\n<h1 id=\"93-java-库中的具体集合\"><a class=\"markdownIt-Anchor\" href=\"#93-java-库中的具体集合\">#</a> 9.3 - Java 库中的具体集合</h1>\n<table>\n<thead>\n<tr>\n<th>集合类型（数据结构）</th>\n<th>描述</th>\n<th>参见</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>ArrayList</strong></td>\n<td>可以动态增长和缩减的一个索引序列</td>\n<td>9.3.2 节</td>\n</tr>\n<tr>\n<td><strong>LinkedList</strong></td>\n<td>可以在任何位置高效插入和删除的一个有序序列</td>\n<td>9.3.1 节</td>\n</tr>\n<tr>\n<td><strong>ArrayDeque</strong></td>\n<td>实现为循环数组的一个双端队列</td>\n<td>9.3.5 节</td>\n</tr>\n<tr>\n<td><strong>HashSet</strong></td>\n<td>没有重复元素的一个无序集合</td>\n<td>9.3.2 节</td>\n</tr>\n<tr>\n<td><strong>TreeSet</strong></td>\n<td>一个有序集</td>\n<td>9.3.4 节</td>\n</tr>\n<tr>\n<td>EnumSet</td>\n<td>一个包含枚举类型值的集</td>\n<td>9.4.6 节</td>\n</tr>\n<tr>\n<td><strong>LinkedHashSet</strong></td>\n<td>一个可以记住元素插入次序的集</td>\n<td>9.4.5 节</td>\n</tr>\n<tr>\n<td>PriorityQueue</td>\n<td>允许高效删除最小元素的一个集合</td>\n<td>9.3.6 节</td>\n</tr>\n<tr>\n<td><strong>HashMap</strong></td>\n<td>存储 键值对 的一个数据结构</td>\n<td>9.4.4 节</td>\n</tr>\n<tr>\n<td><strong>TreeMap</strong></td>\n<td>键有序的一个映射</td>\n<td>9.4 节</td>\n</tr>\n<tr>\n<td>EnumMap</td>\n<td>键属于枚举的一个映射</td>\n<td>9.4.6 节</td>\n</tr>\n<tr>\n<td><strong>LinkedHashMap</strong></td>\n<td>可以记住 键值对 添加次序的一个集合</td>\n<td>9.4.5 节</td>\n</tr>\n<tr>\n<td><strong>WeakHashMap</strong></td>\n<td>值不会在别处使用时就可以被垃圾回收的一个映射</td>\n<td>9.4.4 节</td>\n</tr>\n<tr>\n<td>IdentityHashMap</td>\n<td>用 == 而不是用 equals 比较键的一个映射</td>\n<td>9.4.7 节</td>\n</tr>\n</tbody>\n</table>\n<p>值得一提的是：</p>\n<blockquote>\n<p>在 Java 程序设计语言中，所有的链表实际上都是双向链接的 —— 即每个链接还存放着其前驱的引用。</p>\n</blockquote>\n<h1 id=\"931-iterator-的好兄弟-listiterator\"><a class=\"markdownIt-Anchor\" href=\"#931-iterator-的好兄弟-listiterator\">#</a> 9.3.1 - Iterator 的好兄弟 ListIterator</h1>\n<blockquote>\n<p>ListIterator 有两个方法可以用来反向遍历链表。</p>\n<p><code>E previous()</code></p>\n<p><code>boolean hasPrevious()</code></p>\n<p>与 next 一样，previous 方法返回越过的对象。</p>\n</blockquote>\n<p><strong>注：</strong></p>\n<ul>\n<li>ListIterator 的 void add (E e)\n<ul>\n<li>将指定元素插入列表（可选操作）。该元素被插入到 next 将返回的元素（如果有）之前，以及在 previous 将返回的元素（如果有）之后。 （如果列表不包含任何元素，则新元素将成为列表中的唯一元素。）新元素插入到隐式光标之前：对 next 的后续调用将不受影响，对 previous 的后续调用将返回新元素。</li>\n</ul>\n</li>\n<li>\n<h2 id=\"在使用光标类比时要格外小心-不能连续调用两次-remove-方法add-方法依赖于迭代器的位置remove-方法依赖于迭代器的状态-以下是来自源码注释\"><a class=\"markdownIt-Anchor\" href=\"#在使用光标类比时要格外小心-不能连续调用两次-remove-方法add-方法依赖于迭代器的位置remove-方法依赖于迭代器的状态-以下是来自源码注释\">#</a> 在使用光标类比时要格外小心。不能连续调用两次 remove 方法，add 方法依赖于迭代器的位置，remove 方法依赖于迭代器的状态。以下是来自源码注释</h2>\n</li>\n</ul>\n<blockquote>\n<p>IllegalStateException – 如果在最后一次调用 next 或 previous 之后既没有调用 next 也没有调用 previous ，或者 remove 或 add 没有被调用。</p>\n</blockquote>\n<ul>\n<li>链表只跟踪对列表的结构性修改，例如添加和删除。**set 方法不被视为结构性修改。** 也就是不会增加 modCount 值</li>\n<li>get 方法做了个小优化，如果索引大于 size () / 2，就从列表尾端开始搜索元素。</li>\n</ul>\n<h1 id=\"933-散列集\"><a class=\"markdownIt-Anchor\" href=\"#933-散列集\">#</a> 9.3.3 - 散列集</h1>\n<p>直接复制粘贴韩顺平老师的一个源码解读视频笔记。</p>\n<p>感谢韩顺平老师！</p>\n<p>下面是视频地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZoNDExeTdSOD9wPTUyMg==\">【零基础 快速学 Java】韩顺平 零基础 30 天学会 Java_哔哩哔哩_bilibili</span></p>\n<p><strong>干就完了！</strong></p>\n<p>以防忘记，写下来了一些笔记（其实大都是抄韩老师写的）</p>\n<p><a name=\"8c9d507e-1\"></a></p>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结：</h2>\n<ul>\n<li>HashSet 底层是 HashMap 实现</li>\n<li><strong>添加机制</strong></li>\n</ul>\n<ol>\n<li>添加一个元素时，先得到 Hash 值，Hash 值会转成 -&gt; 索引值</li>\n<li>找到存储数据表 table ，看这个位置是否已经存放元素</li>\n<li>如果没有，则直接加入</li>\n<li>如果有，调用 equals（该方法可重写，具体比较逻辑可由开发者定制） 比较，如果相同，就放弃添加，如果不同，则添加到最后</li>\n<li>在 Java8 中，如果一条链表的元素个数 &gt;= TREEIFY_THRESHOLD (默认是 8) ，并且 table 的大小 &gt;= MIN_TREEIFY_CAPACITY (默认 64)，就会进行树化（红黑树）\n<ul>\n<li>如果当链表长度 &gt; 8，但是 table 的大小还未 &gt;= 64，那么会将 table 扩容（双倍扩容）</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>扩容机制</strong>\n<ol>\n<li>第一次添加元素直接扩容到 16 ， 阈值为 16 * 0.75 == 12</li>\n<li>当 table 长度到达 12 时就会准备扩容，<strong>第 13 个元素成功</strong>添加后就会扩容（双倍扩容），即扩容到 32。此时的阈值为 24\n<ul>\n<li>第 13 个元素是指：<strong>数组加链表的总元素个数</strong>，而不是单指在数组上的元素个数或者在链表上的元素个数</li>\n</ul>\n</li>\n<li>以此类推…</li>\n</ol>\n</li>\n<li>Java 设计者买菜是不是也用补码算钱的，太强了啊！！！</li>\n</ul>\n<h2 id=\"源码解读\"><a class=\"markdownIt-Anchor\" href=\"#源码解读\">#</a> 源码解读：</h2>\n<h3 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\">#</a> 示例代码：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PHP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set = \"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"line-3\"><a class=\"markdownIt-Anchor\" href=\"#line-3\">#</a> line 3 ：</h3>\n<p>HashSet 的无参构造<strong>创建 HashMap 对象</strong>，默认长度是 16，这里需要注意的是：长度并不会立即分配，而是在第一次添加元素时进行分配。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215732.jpg\" alt=\"\"></p>\n<p>并将 DEFAULT_LOAD_FACTOR （默认负载系数）赋值给 loadFactor</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215734.jpg\" alt=\"\"></p>\n<h3 id=\"line-5\"><a class=\"markdownIt-Anchor\" href=\"#line-5\">#</a> line 5 ：</h3>\n<p>调用 HashMap 对象 map 的 public V put (K key, V value) 方法；<strong>PRESENT 只是填补 value 这个位置</strong>，传入参数 key 可变化，但 value 一直是 PRESENT (官方文档：要与后备映射中的对象关联的虚拟值)</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215736.jpg\" alt=\"\"></p>\n<p>再次调用 static final int hash (Object key) 方法，得到 key 的 hash 值</p>\n<p>在 hash () 里判断传入参数 key 是否为空，若为空则返回 0，若不为空则根据  <code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>  算法（为避免碰撞）计算其 hash 值（不完全等价于 HashCode）并返回，作为 putVal () 方法的第一个参数</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215738.jpg\" alt=\"\"></p>\n<h4 id=\"putval\"><a class=\"markdownIt-Anchor\" href=\"#putval\">#</a> putVal(…)</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//table 是放 Node 结点的数组，类型是 Node []</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//if 语句表示 如果当前的 table 是 null，或者大小 == 0，则进行第一次扩容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//resize ()：第一次扩容 table 数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据 key 得到的 Hash 值去计算 key 应该存放到 table 表的哪个索引位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 并把这个位置的对象，赋给 p</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 再判断 p 是否为 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//     如果 p 为空：表示还未存放元素，就创建一个 Node（hash 用于比较是否相等，key 是传入参数，value 是 PREENT ，null 类似于 尾结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//     如果 p 不为空：line 18 ：即 key 元素本应存放的位置已经存放了元素，被占用了，所以 table [...] 不为空</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 开发技巧提示：局部变量在需要时再创建</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 将准备添加的 key 的 hash 值 与 p (是当前索引位置的链表的第一个元素) 的 hash 值比较</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 并且满足 准备加入的 key 与 p 指向的 Node 结点的 key 是同一个对象</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token comment\">//         或者 两者不是同一个对象，但两者 通过 p 指向的 Node 结点的 key 的 equals () 比较后 相同</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token comment\">//                                                         此 equals () 程序员可以定制</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 判断 p 是不是一颗红黑树</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 如果是 红黑树 ，就调用 putTreeVal () 方法添加</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 依次和该链表的每一个元素比较后，都不相同，则添加到该链表的最后</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token comment\">// 由于前面已经比较了一次，这里不在比较</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 判断是否到了链表的最后（链表最后一个结点的 next 是 null）</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 并且将结点 p 的尾结点 p.next 赋值给 e</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 由于这里比较的是尾结点是否为空，故当链表长度为 9 时才能使 binCount 为 7 （binCount 是从 0 开始，为 7 时循环 8 次）</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token comment\">// 已经到了链表末尾，用传入参数 key 创建一个 Node 结点添加到最后一个结点 p 的末尾，即添加到 p.next</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token comment\">// 添加元素到链表后，立即判断该链表是否已经达到 8 个结点</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token comment\">// 如果达到，就调用 treeifyBin () 对当前链表进行树化（转成红黑树）</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token comment\">// ！！！注意：在转成 红黑树 时，要进行判断，详见下方 treeifyBin (tab, hash)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 for 1st</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">// 没有到末尾，则比较 传入参数 key 与 当前索引位置的第一个元素的下一个元素（因为前面 e = p.next） 比较是否相等</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token comment\">// 比较逻辑同前文一样</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// existing mapping for key</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// threshold == 12 </span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 判断长度是否大于 12 ，是否进行扩容</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">//hashMap 留给其子类的方法，此方法在 HashMap 中为空</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"line-9-resize\"><a class=\"markdownIt-Anchor\" href=\"#line-9-resize\">#</a> line 9 ：resize()</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// table == 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// initial capacity was placed in threshold</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// zero initial threshold signifies using defaults</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 扩容长度 ： 16（DEFAULT_INITIAL_CAPACITY == 1 &lt;&lt; 4 == 16</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 确定阈值：当 table 长度到达 16 * DEFAULT_LOAD_FACTOR（0.75） == 12 的时候就准备扩容，防止当操作量比较大时发生阻塞</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 创建一个长度为 newCap（16） 的 Node []</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 并赋值给 table ，所以 table 的长度也是 16</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"line-29-treeifybintab-hash\"><a class=\"markdownIt-Anchor\" href=\"#line-29-treeifybintab-hash\">#</a> line ： 29 ：treeifyBin(tab, hash)：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当链表的长度大于等于 8 时，进入此方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 若 tab 的长度还未到达 MIN_TREEIFY_CAPACITY (64) ，则先进行扩容，暂时不树化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_TREEIFY_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hd <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> tl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token function\">replacementTreeNode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                hd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                p<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> tl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                tl<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            tl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hd<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            hd<span class=\"token punctuation\">.</span><span class=\"token function\">treeify</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"课后疑问\"><a class=\"markdownIt-Anchor\" href=\"#课后疑问\">#</a> 课后疑问：</h2>\n<p>为什么在链表长 &gt;= 8 时，原本在 table [4] 位置的链表被移到了 table [36]？</p>\n<h3 id=\"问题分析\"><a class=\"markdownIt-Anchor\" href=\"#问题分析\">#</a> 问题分析：</h3>\n<p>当链表长度 &gt;= 8 且 table 长度 &lt; 64 时，会在 <strong>resize () 方法</strong> 即本文 **line ： 29 ：treeifyBin (tab, hash)：** 代码块中的 line ：6 处进入 <strong>resize () 方法</strong>并进行扩容，此处将 <strong>resize () 方法</strong> 的代码补全，并加以分析</p>\n<h3 id=\"resize-方法源码分析\"><a class=\"markdownIt-Anchor\" href=\"#resize-方法源码分析\">#</a> resize () 方法源码分析：</h3>\n<p>假设只在 table [4] 位置存在一个长度为 10 的链表</p>\n<p>链表长度为 9 时第一次扩容 table.length 16 --&gt; 32</p>\n<p>链表长度为 10 时第二次扩容 table.length 32 --&gt; 64</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 将 table 备份</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 判断是不是第一次扩容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     第一次扩容：上一个 table 的长度为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//     否则：得到上一个 table 的实际长度（包括 null）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 备份 threshold</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 判断 table 长度是否超过 2 的 30 次方，即数组的最大长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 修改阈值为 int 的最大值 (2^31-1)，这样以后就不会扩容了</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tthreshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \t<span class=\"token comment\">// 将旧的 table 长度 左移一位：即乘以 2 ，再赋值给 新的 table 长度即 newCap</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\toldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 将 旧的阈值也 乘以 2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tnewThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// double threshold</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    // 这一段源码在本次操作中并不会涉及，故注释一下</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    //initial capacity was placed in threshold</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\telse if (oldThr> 0) </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tnewCap = oldThr;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    //zero initial threshold signifies using defaults</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\telse &#123;               </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tnewCap = DEFAULT_INITIAL_CAPACITY;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tnewThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tif (newThr == 0) &#123;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tfloat ft = (float) newCap * loadFactor;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tnewThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float) MAXIMUM_CAPACITY ?</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t(int) ft : Integer.MAX_VALUE);</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 将 翻倍后的 阈值 赋值给此对象的 threshold</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 定义一个 长度为 newCap（即翻倍后的 oldCap）的 Node 数组</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 来储存原 Node 数组内的元素</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 将原 Node [] 即 table 覆盖，或者说 使 table 指向新的 Node []</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\ttable <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 循环遍历 原 Node [] 中的每一个元素</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 定义辅助变量，储存从原 Node [] 取出的 Node 对象</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 将原 Node [] 中的第 j 个元素赋值给 e，相当于备份</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 并判断其是否为空，此时：第四个元素不为空，其余都为空</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\">// 将原来存有元素的位置用 null 替换</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\toldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 判断该位置是否形成链表</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token comment\">// 没有形成链表，则直接将备份的 e 以相同的方式计算出其在 Node [] 中的位置后赋值到该位置</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t\tnewTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token comment\">// 已经形成链表，判断是否为红黑树，此时未树化</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token comment\">// 暂时未学习数据结构，暂不探究</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token comment\">// 进入到这</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// preserve order</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    <span class=\"token comment\">// 将此链表上的元素通过 do...while (...) 循环放到一个新的链表上 </span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token comment\">// 关于这里的按位与，会在下面放一段链接，看完就懂</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                                loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                                loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                            loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                                hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                                hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                            hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    <span class=\"token comment\">// 如果前面按位与的结果是 0，则将复制的链表放回原位置</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    <span class=\"token comment\">// 如果前面按位与的结果不为 0，则将复制的链表放到 j + oldCap 处</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                        hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>line 77：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MDkzNDY1L2FydGljbGUvZGV0YWlscy81MjI3MDUxOQ==\"> Java HashMap 中在 resize () 时候的 rehash, 即再哈希法的理解_请叫我大师兄_的博客 - CSDN 博客_rehash 和 resize</span></p>\n<h1 id=\"951-java-9-中集合的新特性\"><a class=\"markdownIt-Anchor\" href=\"#951-java-9-中集合的新特性\">#</a> 9.5.1 - Java 9 中集合的新特性</h1>\n<p>Java 9 引入了一些静态方法，可以生成给定元素的集或列表，以及给定键值对的映射。List 接口、 Set 接口、Map 接口有 11 个方法，分别有 0 到 10 个参数，其中 List 接口、Set 接口还有一个额外的 参数个数可变的 of 方法。<strong>提供这种特定性是为了提高效率。</strong>-&gt; 即减少使用可变参数所带来的创建数组以及回收数组所带来的消耗。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215740.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215742.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215744.jpg\" alt=\"\"></p>\n<p>需要注意的是：</p>\n<ul>\n<li><strong>其中的元素、键、值不能为 null。</strong></li>\n<li>这些集合对象是不可更改的，如果试图改变他们的内容，会得到一个 UnsupportedOperationException 异常。\n<ul>\n<li><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215747.jpg\" alt=\"\"></li>\n<li>若要得到一个可更改的，可以把这个集合传递到集合的构造器中中。</li>\n</ul>\n</li>\n</ul>\n<p>另外，Java 9 中的 Map 引入了另一个方法： <code>static &lt;K, V&gt; Entry&lt;K, V&gt; entry(K k, V v)</code>  ，这个静态方法可以得到一个 Map.Entry 的对象，可以作为对组，存储一对元素。</p>\n<blockquote>\n<p>在 Java 9 之前这会很麻烦，你必须使用  <code>new AbstractNap.SimpleImmutableEntry&lt;&gt;(first, second)</code>  构造对象。</p>\n</blockquote>\n<p>我什么不使用  <code>Object[] twoObj = new Object[2];</code> ？？</p>\n<h1 id=\"953-不可修改的视图\"><a class=\"markdownIt-Anchor\" href=\"#953-不可修改的视图\">#</a> 9.5.3 - 不可修改的视图</h1>\n<p>Collections 的 一系列方法将帮助我们得到一个不可修改的视图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215749.jpg\" alt=\"\"></p>\n<p>需要注意的是：</p>\n<ul>\n<li>不可修改的视图并不是集合本身不可更改。仍然可以通过集合的原始引用对集合进行修改，并且仍然可以对集合的元素调用更改器方法。</li>\n<li>不可修改的集合中的 equals 方法以及 hashCode 方法将直接使用两个集合的对象地址，不在比较其元素内容。\n<ul>\n<li>AbstractList 中的 equals 和 hashCode：<img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215751.jpg\" alt=\"\"><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215753.jpg\" alt=\"\"></li>\n<li>UnmodifiableList 中的 equals 和 hashCode：<img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215756.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"96-集合中的算法\"><a class=\"markdownIt-Anchor\" href=\"#96-集合中的算法\">#</a> 9.6 - 集合中的算法</h1>\n<p>先欠着，学完排序再来。</p>\n<h1 id=\"12410-原子性\"><a class=\"markdownIt-Anchor\" href=\"#12410-原子性\">#</a> 12.4.10 - 原子性</h1>\n<p>原子性是指<strong>一个操作不可被中断，要么全部执行成功要么全部执行失败</strong>；</p>\n<p><code>java.util.concurrent.atomic</code>  包中有很多类使用了很高效的机器级指令（而没有使用锁）来保证其他操作的原子性。</p>\n<h1 id=\"12412-线程局部变量\"><a class=\"markdownIt-Anchor\" href=\"#12412-线程局部变量\">#</a> 12.4.12 - 线程局部变量</h1>\n<p>使用 ThreadLocal 辅助类为各个线程提供各自的实例。例如：将 SqlSession 对象存入 ThreadLocal 中，以保证 service 层的操作具有原子性。</p>\n<h1 id=\"1251-阻塞队列\"><a class=\"markdownIt-Anchor\" href=\"#1251-阻塞队列\">#</a> 12.5.1 - 阻塞队列</h1>\n<blockquote>\n<p>很多线程问题可以使用一个或多个队列以优雅而安全的方式来描述。</p>\n</blockquote>\n<p>所以  <code>java.util.concurrent</code>  包提供了阻塞队列的几个变体。</p>\n<p>默认情况下：</p>\n<ul>\n<li>LinkedBlockingQueue 的容量没有上届，但是也可以选择指定一个最大容量。</li>\n<li>LinkedBlockingDeque 是一个双端队列。</li>\n<li>ArrayBlockingQueue 在构造时需要指定容量，并且有一个可选的参数来指定是否需要公平性。</li>\n<li>PriorityBlockingQueue 是一个优先队列，而不是先进先出队列。</li>\n</ul>\n<h1 id=\"1252-高效的映射-集-队列\"><a class=\"markdownIt-Anchor\" href=\"#1252-高效的映射-集-队列\">#</a> 12.5.2 - 高效的映射、集、队列</h1>\n<blockquote>\n<p>java.util.concurrent 包提供了映射，有序集、队列的高效实现：ConcurrentHashMap, ConcurrentSkipListMap, ConcurrentSkipListSet, ConcurrentLinkedQueue。</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215758.jpg\" alt=\"\"></p>\n<p>注：</p>\n<ul>\n<li><strong>获取集合长度应该使用</strong> <code>**mappingCount()**</code> <strong> 而不是</strong> <code>**size()**</code>  ，因为 ConcurrentHashMap 可能包含比 int 表示的更多映射。返回的值是估计值；如果存在并发插入或删除，实际计数可能会有所不同。</li>\n<li>集合返回<strong>弱一致性的迭代器</strong>：即迭代器不一定能反映出他们构造之后的所有更改，但不会抛出 ConcurrentModificationException 异常。</li>\n<li>默认情况下并发散列映射可以有至多 16 个同时运行的书写器线程。如果有更多的，那么多余的将阻塞。</li>\n<li>ConcurrentHashMap 不允许有 null 值，因为许多方法都使用 null 值来指示某个映射不存在。（HashMap 允许存在一个 null 键）</li>\n</ul>\n<h1 id=\"1262-执行器\"><a class=\"markdownIt-Anchor\" href=\"#1262-执行器\">#</a> 12.6.2 - 执行器</h1>\n<blockquote>\n<p>执行器 ( <code>Executors</code> ) 有许多静态工厂方法，用来构造线程池，如下表</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>newCachedThreadPool</td>\n<td>必要时创建新线程，空闲线程会保留 60 s</td>\n</tr>\n<tr>\n<td>newFixedThreadPool</td>\n<td>池中包含固定数目的线程，空闲线程会一直保留</td>\n</tr>\n<tr>\n<td>newWorkStealingPool</td>\n<td>一种适合 “fork-join” 任务的线程池，其中复杂的任务会分解为简单的任务，空闲线程会 “密取” 较简单的任务</td>\n</tr>\n<tr>\n<td>newSingleThreadExector</td>\n<td>只有一个线程的 “池”，会顺序地执行所提交地任务</td>\n</tr>\n<tr>\n<td>newScheduledThreadPool</td>\n<td>用于调度执行地固定线程池</td>\n</tr>\n<tr>\n<td>newSingleThreadScheduledExecutor</td>\n<td>用于调度执行地单线程 “池”</td>\n</tr>\n</tbody>\n</table>\n<p>注：</p>\n<ul>\n<li>为了得到最优的运行速度，并发线程数等于处理器地内核数。</li>\n<li>也可以使用如下方法自定义一个线程池： <code>ExecutorService executorService = new ThreadPoolExecutor(//...);</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                          <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                          <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                          <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                          <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>使用给定的初始参数创建一个新的 ThreadPoolExecutor 。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>参形：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    corePoolSize - 保留在池中的线程数，即使它们是空闲的，除非设置 allowCoreThreadTimeOut</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    maximumPoolSize – 池中允许的最大线程数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    keepAliveTime – 当线程数大于核心时，这是多余的空闲线程在终止前等待新任务的最长时间。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    unit – keepAliveTime 参数的时间单位</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    workQueue – 用于在执行任务之前保存任务的队列。此队列将仅保存由 execute 方法提交的 Runnable 任务。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    threadFactory – 执行器创建新线程时使用的工厂</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    handler：通过这个参数你可以自定义任务的拒绝策略。如果线程池中所有的线程都在忙碌，并且工作队列也满了（前提是工作队列是有界队列），那么此时提交任务，线程池就会拒绝接收。至于拒绝的策略，你可以通过 handler 这个参数来指定。ThreadPoolExecutor 已经提供了以下 4 种策略。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        CallerRunsPolicy：提交任务的线程自己去执行该任务。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        AbortPolicy：默认的拒绝策略，会 throws RejectedExecutionException。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        DiscardPolicy：直接丢弃任务，没有任何异常抛出。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        DiscardOldestPolicy：丢弃最老的任务，其实就是把最早进入工作队列的任务丢弃，然后把新任务加入到工作队列。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>抛出：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    IllegalArgumentException – 如果以下条件之一成立： corePoolSize &lt; 0 keepAliveTime &lt; 0 maximumPoolSize &lt;= 0 maximumPoolSize &lt; corePoolSize</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    NullPointerException – 如果 workQueue 或 threadFactory 或 handler 为 null</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"1264-fork-join框架\"><a class=\"markdownIt-Anchor\" href=\"#1264-fork-join框架\">#</a> 12.6.4 - fork-join 框架</h1>\n<p>先画个饼，学完分治算法再回来</p>\n",
            "tags": []
        },
        {
            "id": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%BA%8C%EF%BC%884.1%20_%20%EF%BC%89/",
            "url": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%BA%8C%EF%BC%884.1%20_%20%EF%BC%89/",
            "title": "卷二（4.1 _ ）",
            "date_published": "2023-09-07T09:59:14.000Z",
            "content_html": "<h1 id=\"41-连接到服务器\"><a class=\"markdownIt-Anchor\" href=\"#41-连接到服务器\">#</a> 4.1 - 连接到服务器</h1>\n<h2 id=\"411-使用-telnet\"><a class=\"markdownIt-Anchor\" href=\"#411-使用-telnet\">#</a> 4.1.1 - 使用 telnet</h2>\n<blockquote>\n<p>telnet 是一种用于网络编程的非常强大的调试工具，可以在命令 shell 中输入 telnet 来启动它。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>注：在 Windows 中，需要激活 telnet。要激活它，需要到 “控制面板” ，选择 “程序” ，点击 “打开 / 关闭 Windows 特性”， 然后选择 “Telnet” 客户带复选框。</li>\n</ul>\n</blockquote>\n<p>日期与时间类相关代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 每个月的第 i 个星期一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每个月的第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个星期一 : \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">dayOfWeekInMonth</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MONDAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 每个月的第一天</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每个月的第一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">firstDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 下个月的第一天</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下个月的第一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">firstDayOfNextMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 明年的第一天</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"明年的第一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">firstDayOfNextYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 今年的第一天</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今年的第一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">firstDayOfYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 这个月的第一个星期 i</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个月的第一个星期\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">firstInMonth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 这个月的最后一天</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个月的最后一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">lastDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 今年的最后一天</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今年的最后一天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">lastDayOfYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 这个月的最后一个星期 i</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个月的最后一个星期\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">lastInMonth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 下一个星期 i (与下一个不同的是：假设今天星期六，那么当我查询下一个星期六时将会返回下周六的日期)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下一个星期 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 下一个星期 i (与上一个不同的是：假设今天星期六，那么当我查询下一个星期六时将会返回今天的日期)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下一个星期 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextOrSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 今天</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今天\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofDateAdjuster</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnaryOperator</span><span class=\"token punctuation\">.</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 两天后</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"两天后\"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofDateAdjuster</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%BA%8C(1.2%20_%203.9)/",
            "url": "https://zrgzs.github.io/guide/2023/09/07/java%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/%E5%8D%B7%E4%BA%8C(1.2%20_%203.9)/",
            "title": "卷二(1.2 _ 3.9)",
            "date_published": "2023-09-07T09:59:14.000Z",
            "content_html": "<h1 id=\"12-stream的惰性\"><a class=\"markdownIt-Anchor\" href=\"#12-stream的惰性\">#</a> 1.2 - Stream 的惰性</h1>\n<blockquote>\n<p>因为在执行流的操作时，我们并没用修改流背后的集合。流并没有修改其数据，数据一直储存在单独的集合中。如果修改了该集合，那么流的操作就会变成不可预知的。准确的讲，因为中间的流操作是惰性的，所以在终止操作得以执行时，集合有可能已经发生了变化。</p>\n</blockquote>\n<h1 id=\"13-filter-map-flatmap方法\"><a class=\"markdownIt-Anchor\" href=\"#13-filter-map-flatmap方法\">#</a> 1.3 - filter、map、flatMap 方法</h1>\n<ul>\n<li><code>**Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)**</code>\n<ul>\n<li>返回由与给定谓词匹配的此流的元素组成的流。这是一个中间操作。</li>\n<li>参形：predicate – 一个无干扰的、无状态的谓词，应用于每个元素以确定是否应该包含它</li>\n<li>返回值：新流</li>\n</ul>\n</li>\n<li><code>**default Stream&lt;T&gt; takeWhile(Predicate&lt;? super T&gt; predicate) &#123;&#125;**</code> **  Java 9**\n<ul>\n<li>如果此流是有序的，则返回一个流，该流由从该流中提取的与给定谓词匹配的元素的最长前缀组成。否则，如果此流是无序的，则返回一个流，该流由从该流中获取的与给定谓词匹配的元素的子集组成。如果此流已排序，则最长前缀是此流中与给定谓词匹配的元素的连续序列。序列的第一个元素是这个流的第一个元素，紧跟在序列最后一个元素之后的元素与给定的谓词不匹配。如果这个流是无序的，并且这个流的一些（但不是全部）元素匹配给定的谓词，那么这个操作的行为是不确定的；它可以自由地获取匹配元素的任何子集（包括空集）。如果此流的所有元素都与给定谓词匹配，则此操作将获取所有元素（结果与输入相同），或者如果流中没有元素与给定谓词匹配，则与此流是有序还是无序无关被采取（结果是一个空流）。这是一个短路有状态的中间操作。</li>\n<li>参形：predicate – 一个无干扰、无状态的谓词，应用于元素以确定元素的最长前缀。</li>\n<li>返回值：新流</li>\n<li>API 说明：虽然 takeWhile () 通常是顺序流管道上的廉价操作，但在有序并行管道上可能会非常昂贵，因为该操作不仅要返回任何有效前缀，还要返回遇到顺序中元素的最长前缀。如果您的情况的语义允许，使用无序流源（例如 generate (Supplier) ）或使用 unordered () 删除排序约束可能会导致并行管道中的 takeWhile () 显着加速。如果需要与遇到顺序保持一致，并且您在并行管道中使用 takeWhile () 时遇到性能或内存利用率不佳的情况，则使用 sequence () 切换到 sequential () 执行可能会提高性能。</li>\n<li>实现要求：默认实现获取此流的 spliterator ，包装该拆分器以支持此操作在遍历时的语义，并返回与包装的拆分器关联的新流。返回的流保留了该流的执行特性（即根据 isParallel () 并行或顺序执行），但包装的拆分器可能选择不支持拆分。当返回的流关闭时，将调用返回的流和此流的关闭处理程序。</li>\n<li>自：9</li>\n</ul>\n</li>\n<li><code>**&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)**</code>\n<ul>\n<li>返回由将给定函数应用于此流的元素的结果组成的流。这是一个中间操作。</li>\n<li>参形：mapper – 一个无干扰、无状态的函数，应用于每个元素</li>\n<li>类型形参：<R> – 新流的元素类型</li>\n<li>返回值：新流</li>\n</ul>\n</li>\n<li><code>**&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)**</code>\n<ul>\n<li>返回一个流，其中包含将此流的每个元素替换为通过将提供的映射函数应用于每个元素而生成的映射流的内容的结果。每个映射流在其内容被放入该流后 closed 。 （如果映射流为 null ，则使用空流。）这是一个中间操作。</li>\n<li>参形：mapper – 一个无干扰、无状态的函数，适用于每个元素，产生新值流</li>\n<li>类型形参：<R> – 新流的元素类型</li>\n<li>返回值：新流</li>\n<li>API 说明：flatMap () 操作具有对流的元素应用一对多转换的效果，然后将生成的元素展平为新的流。例子。如果 orders 是一个采购订单流，并且每个采购订单都包含一系列行项目，那么下面会生成一个流，其中包含所有订单中的所有行项目： <code>orders.flatMap(order -&gt; order.getLineItems().stream())...</code>  如果 path 是文件的路径，则以下内容会生成该文件中包含的 words 流： <code>Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8);``Stream&lt;String&gt; words = lines.flatMap(line -&gt; Stream.of(line.split(&quot; +&quot;)));</code>  传递给 flatMap 的 mapper 函数使用简单的正则表达式将一行拆分为一个单词数组，然后从该数组创建一个单词流。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注\"><a class=\"markdownIt-Anchor\" href=\"#注\">#</a> 注：</h2>\n<p>filter 和 takeWhile 的区别：说人话就是，filter 会对所有元素进行筛选，takeWhile 会被第一个不符合给打断，后面无论是否符合都不再进行过滤。</p>\n<h1 id=\"17-optional-类型\"><a class=\"markdownIt-Anchor\" href=\"#17-optional-类型\">#</a> 1.7 - Optional 类型</h1>\n<h2 id=\"171-获取-optional-的值\"><a class=\"markdownIt-Anchor\" href=\"#171-获取-optional-的值\">#</a> 1.7.1 - 获取 Optional 的值</h2>\n<blockquote>\n<p>有效的使用 Optional 的关键是要使用这样的方法：它在值不存在的情况下会产生一个替代物，而只有在值存在的情况下才会使用这个值。</p>\n<ul>\n<li>API :\n<ul>\n<li><code>T orElse(T other)</code>\n<ul>\n<li>产生这个 Optional 的值，或者在<strong>该 Optional 为空时，产生 other</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code>\n<ul>\n<li>产生这个 Optional 的值，或者在<strong>该 Optional 为空时，产生调用 other 的结果</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>&lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code>\n<ul>\n<li>产生这个 Optional 的值，或者在<strong>该 Optional 为空时，抛出 exceptionSupplier</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"172-消费-optional-的值\"><a class=\"markdownIt-Anchor\" href=\"#172-消费-optional-的值\">#</a> 1.7.2 - 消费 Optional 的值</h2>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>void ifPresent(Consumer&lt;? super T&gt; action)</code>\n<ul>\n<li><strong>如果该 Optional 不为 null，就将它的值传递给 action</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>void ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</code>\n<ul>\n<li><strong>如果该 Optional 不为 null，就将它的值传递给 action，否则调用 emptyAction</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"174-关于-optional-类型正确用法的提示\"><a class=\"markdownIt-Anchor\" href=\"#174-关于-optional-类型正确用法的提示\">#</a> 1.7.4 - 关于 Optional 类型正确用法的提示：</h2>\n<ul>\n<li>Optional 类型的变量永远都不应该为 null。</li>\n<li>不要使用 Optional 类型的域。其代价是额外多出来一个对象，在类的内部，使用 null 表示缺失的域更易于操作。</li>\n<li>不要在集合中放置 Optional 对象，并且不要将他们用作 map 的键。</li>\n</ul>\n<h2 id=\"175-创建-optional-的值\"><a class=\"markdownIt-Anchor\" href=\"#175-创建-optional-的值\">#</a> 1.7.5 - 创建 Optional 的值</h2>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>static &lt;T&gt; Optional&lt;T&gt; of(T Value)</code> -<em>r</em>\n<ul>\n<li>产生一个具有给定值的 Optional ，<strong>若 value 为 null ，那么会抛出一个 NPE。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code>\n<ul>\n<li>产生一个具有给定值的 Optional ，<strong>若 value 为 null ，那么产生一个空的 Optional。</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>static &lt;T&gt; Optional&lt;T&gt; empty()</code>\n<ul>\n<li>产生一个空的 Optional。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"176-map-和-flatmap\"><a class=\"markdownIt-Anchor\" href=\"#176-map-和-flatmap\">#</a> 1.7.6 - map 和 flatMap</h2>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code>\n<ul>\n<li><strong>如果存在值，则对其应用提供的映射函数</strong>，如果结果为非 null，则返回描述结果的 Optional 。否则返回一个空的 Optional 。</li>\n<li>参形：mapper – 应用于值的映射函数（如果存在）</li>\n<li>类型形参：<U> – 映射函数结果的类型</li>\n<li>返回值：Optional 描述将映射函数应用于此 Optional 的值的结果，如果存在值，否则为空 Optional</li>\n<li>抛出：NullPointerException – 如果映射函数为 null</li>\n<li>API 说明：此方法支持对可选值进行后处理，无需显式检查返回状态。例如，以下代码遍历文件名流，选择一个尚未处理的文件，然后打开该文件，返回 Optional<FileInputStream> ：</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code>\n<ul>\n<li>如果存在值，则将提供的 Optional 轴承映射函数应用于它，返回该结果，否则返回空 Optional 。此方法类似于 map (Function) ，但提供的映射器的结果已经是 Optional ，<strong>如果被调用， flatMap 不会用附加的 Optional 包装它。</strong></li>\n<li>参形：mapper – 应用于值的映射函数，如果存在映射函数</li>\n<li>类型形参：<U> – Optional 返回的类型参数</li>\n<li>返回值：如果存在值，则将 Optional 轴承映射函数应用于此 Optional 的值的结果，否则为空 Optional</li>\n<li>抛出：NullPointerException – 如果映射函数为 null 或返回 null 结果</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">></span></span> fis <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> <span class=\"token operator\">!</span><span class=\"token function\">isProcessedYet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                   <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>在这里， findFirst 返回一个 Optional ，然后 map 返回一个 Optional 用于所需文件（如果存在）。</p>\n</blockquote>\n<h3 id=\"异同点\"><a class=\"markdownIt-Anchor\" href=\"#异同点\">#</a> 异同点：</h3>\n<ul>\n<li></li>\n</ul>\n<h4 id=\"同\"><a class=\"markdownIt-Anchor\" href=\"#同\">#</a> 同：</h4>\n<ul>\n<li>都会将 Optional 的值应用于 mapper 函数</li>\n<li></li>\n</ul>\n<h4 id=\"异\"><a class=\"markdownIt-Anchor\" href=\"#异\">#</a> 异：</h4>\n<ul>\n<li>map 将 Optional 的值应用于 mapper 函数之后会使用 Optional 进行封装。</li>\n<li>flatMap  Optional 的值应用于 mapper 函数之后不会使用 Optional 进行封装。</li>\n</ul>\n<h1 id=\"18-收集结果到-collection-中\"><a class=\"markdownIt-Anchor\" href=\"#18-收集结果到-collection-中\">#</a> 1.8 - 收集结果到 Collection 中</h1>\n<p>处理完流之后，往往需要查看其结果，除了常用的 foreach 遍历之外，还可能会需要将流中的数据收集到另一个数据结构中，此时有一个便捷的方法可以使用：</p>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</code></li>\n<li><strong>使用 Collector 对此流的元素执行可变归约操作。</strong> Collector 封装了用作 collect (Supplier, BiConsumer, BiConsumer) 参数的函数，允许重用收集策略和组合收集操作，例如多级分组或分区。如果流是并行的，并且 Collector 是 concurrent 的，并且流是无序的或收集器是 unordered 的，则将执行并发归约（有关并发归约的详细信息，请参阅 Collector 。）这是终端操作。当并行执行时，可以实例化、填充和合并多个中间结果，以保持可变数据结构的隔离。<strong>因此，即使与非线程安全的数据结构（例如 ArrayList ）并行执行，也不需要额外的同步来进行并行归约。</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>参形：收集器 - 描述减少的 Collector</li>\n<li>类型形参：\n<ul>\n<li><R> – 结果的类型</li>\n<li><A> – Collector 的中间累积类型</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>返回值：减少的结果</li>\n<li>API 说明：以下会将字符串累积到 ArrayList 中：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> asList <span class=\"token operator\">=</span> stringStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>以下可以控制获得的集的种类： 或者通过连接操作收集流中所有字符串：</p>\n</blockquote>\n<p>#1.9 - 收集结果到 Map 中</p>\n<p>注：</p>\n<ul>\n<li>通常情况下，Map 的键是流中对象的某个唯一存在的属性，而 Map 的值则为 该对象，因此第二个参数可以使用  <code>Function.identity()</code></li>\n<li>收集到 Map 中时若多个元素具有相同的键，那么收集器将抛出一个  <code>IllegalStateException</code>  ，此时需要引入第三个参数来解决这个冲突（即指定一个值放入 Map，可以是已经存在的，也可以是新的）</li>\n<li>其次，此时元素不再是按照流中的顺序收集的，但这通常不会有什么问题。</li>\n</ul>\n<h1 id=\"110-groupingby\"><a class=\"markdownIt-Anchor\" href=\"#110-groupingby\">#</a> 1.10 - groupingBy</h1>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>public static &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt; groupingBy(Function&lt;? super T, ? extends K&gt; classifier)</code>\n<ul>\n<li>** 返回一个 Collector ，对 T 类型的输入元素执行 “分组依据” 操作，根据分类函数对元素进行分组，并在 Map 中返回结果。** 分类函数将元素映射到某个键类型 K 。收集器生成一个 Map&lt;K, List&gt; ，其键是将分类函数应用于输入元素所产生的值，其对应值是 List ，其中包含映射到分类函数下关联键的输入元素。不保证返回的 Map 或 List 对象的类型、可变性、可序列化性或线程安全性。</li>\n<li>参形：分类器 - 将输入元素映射到键的分类器函数</li>\n<li>类型形参：<T> – 输入元素的类型<K> – 键的类型</li>\n<li>返回值：实现 group-by 操作的 Collector</li>\n<li>实现要求：这会产生类似于以下内容的结果： <code>groupingBy(classifier, toList());</code></li>\n<li>实现说明：返回的 Collector 不是并发的。对于并行流管道， combiner 功能通过将键从一个映射合并到另一个映射来操作，这可能是一项昂贵的操作。如果不需要保留元素在生成的 Map 收集器中出现的顺序，则使用 groupingByConcurrent (Function) 可能会提供更好的并行性能。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>例如：</p>\n<ul>\n<li>下面将按城市对 Person 对象进行分类：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> peopleByCity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">=</span> personStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>下面将按州和城市对 Person 对象进行分类，将两个 Collector 级联在一起：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> peopleByStateAndCity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">=</span> personStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getState</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                                  <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"111-下游收集器\"><a class=\"markdownIt-Anchor\" href=\"#111-下游收集器\">#</a> 1.11 - 下游收集器</h1>\n<blockquote>\n<ul>\n<li>API :\n<ul>\n<li><code>public static &lt;T, K, A, D&gt; Collector&lt;T, ?, Map&lt;K, D&gt;&gt; groupingBy(Function&lt;? super T, ? extends K&gt; classifier, \t\t\t\t\t\t\t Collector&lt;? super T, A, D&gt; downstream)</code>\n<ul>\n<li>返回一个 Collector ，对 T 类型的输入元素实现级联 “分组依据” 操作，根据分类函数对元素进行分组，然后使用指定的下游 Collector 对与给定键关联的值执行归约操作。** 分类函数将元素映射到某个键类型 K 。下游收集器对 T 类型的元素进行操作并产生 D 类型的结果。结果收集器产生一个 Map&lt;K, D&gt; 。** 不保证返回的 Map 的类型、可变性、可序列化性或线程安全性。例如，要计算每个城市的人的姓氏集：</li>\n<li>参形：分类器 - 将输入元素映射到键的分类器函数下游 - 实施下游减少的 Collector</li>\n<li>类型形参：<T> – 输入元素的类型<K> – 键的类型<A> – 下游收集器的中间累积类型<D> – 下游归约的结果类型</li>\n<li>返回值：实现级联分组操作的 Collector</li>\n<li>实现说明：返回的 Collector 不是并发的。对于并行流管道， combiner 功能通过将键从一个映射合并到另一个映射来操作，这可能是一项昂贵的操作。如果不需要保留元素呈现给下游收集器的顺序，则使用 groupingByConcurrent (Function, Collector) 可能会提供更好的并行性能。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">City</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> namesByCity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                          <span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">,</span> <span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote></blockquote>\n<h1 id=\"113-基本类型流\"><a class=\"markdownIt-Anchor\" href=\"#113-基本类型流\">#</a> 1.13 - 基本类型流</h1>\n<blockquote>\n<p>到目前为止，我们都是将整数收集到  <code>Stream&lt;Integer&gt;</code>  中，但其实这是极其低效的（因为需要大量的拆箱装箱）。而流库中有专门的 IntStream、LongStream、DoubleStream。</p>\n</blockquote>\n<ul>\n<li>byte、short、char、int、boolean 可以使用 IntStream</li>\n<li>float、double 可以使用 DoubleStream</li>\n</ul>\n<h2 id=\"基本流与对象流的差异\"><a class=\"markdownIt-Anchor\" href=\"#基本流与对象流的差异\">#</a> 基本流与对象流的差异：</h2>\n<ul>\n<li>toArray 方法会返回基本类型数组</li>\n<li>产生可选结果的方法会返回一个 OptionalInt、OptionalLong、OptionalDouble。</li>\n<li>具有 sum、average、max、min 方法。</li>\n<li>summaryStatistics 方法会产生一个类型为 IntSummaryStatistics、LongSummaryStatistics、DoubleSummaryStatistics 的对象。</li>\n<li>Random 类具有 ints、longs、doubles 方法，它们返回由随机数构成的基本类型流。但如果需要并行流中的随机数，那么需要使用 SplittableRandom 类。</li>\n</ul>\n<h1 id=\"213-关于文件路径分隔符\"><a class=\"markdownIt-Anchor\" href=\"#213-关于文件路径分隔符\">#</a> 2.1.3 - 关于文件路径分隔符</h1>\n<blockquote>\n<p>由于反斜杠字符在 Java 字符串中是转义字符，因此要确保在 Windows 风格的路径名中使用  <code>\\\\</code>  。当然也可以使用  <code>/</code>  ，但并不推荐这样做，因为 Windows 系统函数的行为会与时俱进的发生变化。因此，对于可移植的程序来说，应该使用程序所运行平台的文件分隔符，我们可以通过常量字符串  <code>java.io.File.separator</code>  来获得它。</p>\n</blockquote>\n<h1 id=\"218-字符编码方式\"><a class=\"markdownIt-Anchor\" href=\"#218-字符编码方式\">#</a> 2.1.8 - 字符编码方式</h1>\n<p>直接放大佬 blog 链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbndlbmJpYW8vYXJjaGl2ZS8yMDExLzA4LzExLzIxMzQ1MDMuaHRtbA==\">UTF-8 编码规则（转） - 奋斗者 - 博客园 (cnblogs.com)</span></p>\n<h1 id=\"221-dataoutput-与-datainput-中的-writeutf-和-readutf-的区别\"><a class=\"markdownIt-Anchor\" href=\"#221-dataoutput-与-datainput-中的-writeutf-和-readutf-的区别\">#</a> 2.2.1 - DataOutput 与 DataInput 中的 writeUTF () 和 readUTF () 的区别</h1>\n<ul>\n<li><code>writeUTF(String s)</code>  写出由 “修订过的 UTF-8” 格式的字符构成的字符串。</li>\n<li><code>writeUTF(String s)</code>  读入由 “修订过的 UTF-8” 格式的字符构成的字符串。</li>\n</ul>\n<h2 id=\"什么是-修订过的-utf-8\"><a class=\"markdownIt-Anchor\" href=\"#什么是-修订过的-utf-8\">#</a> 什么是 “修订过的 UTF-8” ？？？</h2>\n<blockquote>\n<p>其中，Unicode 码元序列首先用 UTF-16 表示，然后再使用 UTF-8 规则进行编码。修订后的编码方式对于编码大于 0xFFFF 的字符的处理有所不同，这是为了向后兼容再 Unicode 还没有超过 16 位时构建的虚拟机。</p>\n<p>因为没有其他方法会使用 UTF-8 的这种修订，所以你 ** 只应该在写出用于 Java 虚拟机的字符串时才使用 writeUTF 方法。** 例如，当你需要编写一个生成字节码的程序时。</p>\n</blockquote>\n<p>（暗示 编译器？？？）</p>\n<h1 id=\"234-序列化单例和类型安全的枚举\"><a class=\"markdownIt-Anchor\" href=\"#234-序列化单例和类型安全的枚举\">#</a> 2.3.4 - 序列化单例和类型安全的枚举</h1>\n<blockquote>\n<p>在序列化和反序列化时，如果目标对象是唯一的，那么你必须加倍当心。这通常会在实现单例和类型安全的枚举是发生。如果你使用 Java 语言的 enum 结构，那么你就不必担心序列化，它能够正常工作。但是，假如你在维护遗留代码，其中包含下面这样的枚举类型：</p>\n<p>这种风格在 enum 出现之前是很普遍的。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此类和 卷二 上的实例不一样但是很类似</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Orientation</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Orientation</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Orientation</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在我们来序列化和反序列化看看会发生什么？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\\\\src\\\\test01\\\\ObjectOutPut.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"study\\\\src\\\\test01\\\\ObjectOutPut.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Orientation</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">Orientation<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Orientation</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1 <span class=\"token operator\">==</span> <span class=\"token class-name\">Orientation<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>** 当经过一次序列化和反序列化之后，反序列化得到的对象将！= 和 Orientation 中的常量。** 它与任何预定义的常量都不等同。</p>\n<p>即使该类的构造器是私有的，但反序列化也可以创建新的对象！</p>\n<p>为了解决这个问题，你需要定义一种称为 readResolve 的特殊序列化方法。如果定义了 readResolve 方法，在对象被序列化之后就会调用它。它必须返回一个对象，而该对象之后会称为 readObject () 的返回值。</p>\n</blockquote>\n<p>增加的 readResolve () 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ObjectStreamException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Orientation<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Orientation<span class=\"token punctuation\">.</span>B</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>好了，现在就不会破坏单例模式了。</p>\n<h2 id=\"那么为什么定义了一个方法就不会破坏单例模式了呢\"><a class=\"markdownIt-Anchor\" href=\"#那么为什么定义了一个方法就不会破坏单例模式了呢\">#</a> 那么为什么定义了一个方法就不会破坏单例模式了呢？？</h2>\n<p>在 ObjectInputStream 类中的 readOrdinaryObject () 中有一段代码会做如下判定：</p>\n<ul>\n<li>若被序列化的类没有定义 readResolve 方法，那么就直接返回 obj。</li>\n<li>若被序列化的类定义了 readResolve 方法，那么会调用其方法获得正确的单例对象，并将其赋值给 obj 进行返回。</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215800.jpg\" alt=\"\"></p>\n<p>放上一段大佬的 blog : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzA0ODUxL2FydGljbGUvZGV0YWlscy8xMTU4MjM5OTE/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NjEuMSZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50X3QwLm5vbmUtdGFzay1ibG9nLTJ+ZGVmYXVsdH5DVFJMSVNUfmRlZmF1bHQtMS0xMTU4MjM5OTEtYmxvZy01MDk4Mjk1Ni5wY19yZWxldmFudF9zY2FucGF5bWVudHYxJmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudF90MC5ub25lLXRhc2stYmxvZy0yfmRlZmF1bHR+Q1RSTElTVH5kZWZhdWx0LTEtMTE1ODIzOTkxLWJsb2ctNTA5ODI5NTYucGNfcmVsZXZhbnRfc2NhbnBheW1lbnR2MSZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTE=\">(50 条消息) readResolve () 原理_Pinker_Q 的博客 - CSDN 博客_readresolve</span></p>\n<h1 id=\"236-为克隆使用序列化\"><a class=\"markdownIt-Anchor\" href=\"#236-为克隆使用序列化\">#</a> 2.3.6 - 为克隆使用序列化</h1>\n<p>在对象被序列化和反序列化之后得到的一个新对象是对现有对象的一个 <strong>深拷贝</strong> 。在此过程中可以使用 ByteArrayOutputStream 将数据保存到字节数组中。</p>\n<h1 id=\"241-path-java-7\"><a class=\"markdownIt-Anchor\" href=\"#241-path-java-7\">#</a> 2.4.1 - Path (Java 7 +)</h1>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>endsWith(Path other)</code>   测试此路径是否以给定的路径结束。</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>endsWith(String other)</code>   测试此路径是否以  <code>Path</code>  结束，通过转换给定的路径字符串，完全按照  <code>[endsWith(Path)](../../../java/nio/file/Path.html#endsWith-java.nio.file.Path-)</code>  方法指定的方式构建。</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>equals(Object other)</code>   测试此路径与给定对象的相等性。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>getFileName()</code>   将此路径表示的文件或目录的名称返回为  <code>Path</code>  对象。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>getParent()</code>   返回 <em>父路径</em> ，或  <code>null</code>  如果此路径没有父。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>getRoot()</code>   返回此路径的根组分作为  <code>Path</code>  对象，或  <code>null</code>  如果该路径不具有根组件。</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>hashCode()</code>   计算此路径的哈希码。</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isAbsolute()</code>   告诉这条路是否是绝对的。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>normalize()</code>   返回一个路径，该路径是冗余名称元素的消除。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>relativize(Path other)</code>   构造此路径和给定路径之间的相对路径。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>resolve(Path other)</code>   根据这条路径解决给定的路径。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>resolve(String other)</code>   一个给定的路径字符串转换为  <code>Path</code>  并解析它针对此   <code>Path</code>  在完全按规定的方式  <code>[resolve](../../../java/nio/file/Path.html#resolve-java.nio.file.Path-)</code>  方法。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>resolveSibling(Path other)</code>   根据此路径的  <code>[parent](../../../java/nio/file/Path.html#getParent--)</code>  路径解决给定的路径。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>resolveSibling(String other)</code>   将给定的路径字符串转换为  <code>Path</code>  ，并按照  <code>[resolveSibling](../../../java/nio/file/Path.html#resolveSibling-java.nio.file.Path-)</code>  方法指定的方式将其解析为该路径的   <code>[parent](../../../java/nio/file/Path.html#getParent--)</code>  路径。</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>startsWith(Path other)</code>   测试此路径是否以给定的路径开始。</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>startsWith(String other)</code>   测试此路径是否以  <code>Path</code>  ，通过转换给定的路径字符串，按照  <code>[startsWith(Path)](../../../java/nio/file/Path.html#startsWith-java.nio.file.Path-)</code>  方法指定的方式构建。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>subpath(int beginIndex, int endIndex)</code>   返回一个相对的  <code>Path</code>  ，它是该路径的名称元素的子序列。</td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>toAbsolutePath()</code>   返回表示此路径的绝对路径的  <code>Path</code>  对象。</td>\n</tr>\n<tr>\n<td><code>File</code></td>\n<td><code>toFile()</code>   返回表示此路径的 <code>[File](../../../java/io/File.html)</code>  对象。</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>toString()</code>   返回此路径的字符串表示形式。</td>\n</tr>\n<tr>\n<td><code>URI</code></td>\n<td><code>toUri()</code>   返回一个 URI 来表示此路径。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"246-访问目录中的项\"><a class=\"markdownIt-Anchor\" href=\"#246-访问目录中的项\">#</a> 2.4.6 - 访问目录中的项</h1>\n<p>当我们希望访问一个目录下的所有结构（包括目录和文件）时，第一时间想到的是  <code>Files.list()</code>  来递归调用，但我们有一个更简便的方法可以帮助我们遍历：</p>\n<ul>\n<li>API :\n<ul>\n<li><code>public static Stream&lt;Path&gt; walk(Path start, FileVisitOption... options) throws IOException</code>\n<ul>\n<li>返回一个 <code>Stream</code>   ，它通过走根据给定起始文件的文件树懒惰地填充 <code>Path</code>  。文件树以<strong>深度优先</strong>的方式遍历，流中的元素是 <code>Path</code>  对象，如 <code>resolving</code>  所示，相对路径为 <code>start</code>  。这个方法的工作原理就像调用它相当于评估表达式：  <code>walk(start, Integer.MAX_VALUE, options)</code>  换句话说，它访问文件树的所有级别。返回的流封装一个或多个 <code>DirectoryStream</code>  s。 如果需要的文件系统资源的及时处置，该 <code>try</code>  -with 资源结构应该被用来确保数据流的 <code>close</code>  流操作完成后调用方法。  在封闭的流上运行将导致 <code>IllegalStateException</code> 。</li>\n<li>参数 <code>start</code>  - 起始文件 <code>options</code>  - 配置遍历的选项</li>\n<li>结果 <code>Stream</code>  的 <code>Path</code></li>\n<li>异常 <code>SecurityException</code>  -  如果安全管理员拒绝访问起始文件。 在默认提供程序的情况下，  <code>checkRead</code>  方法被调用来检查对该目录的读访问。 <code>IOException</code>  - 如果在访问起始文件时抛出 I  / O 错误。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>不过，遗憾的是不能通过此方法进行删除目录树，因为你必须先删除子目录，但这并不是不可克服的。下一节将展示如何解决。</p>\n<h1 id=\"247-使用目录流\"><a class=\"markdownIt-Anchor\" href=\"#247-使用目录流\">#</a> 2.4.7 - 使用目录流</h1>\n<p>上一节的 walk 方法会以深度优先的方式遍历所有目录，但我们有时并不需要所有目录，这个时候就需要更加 <strong>细粒度</strong> 的控制。也就是  <code>Files.newDirectoryStream</code>  ，它会产生一个  <code>DirectoryStream</code>  ，但<strong>它并不是 Stream 的子接口</strong>，而是专门用于目录遍历的接口，<strong>他是 Iterable 的子接口</strong>，并且可以使用 <strong>glob 模式</strong>来过滤文件。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配路径组成部分中 0 个或 多个字符</td>\n<td>*.java 匹配当前目录中的所有 java 文件</td>\n</tr>\n<tr>\n<td>**</td>\n<td>匹配跨目录边界的 0 个或多个字符</td>\n<td>**.java 匹配在所有子目录中的所有 java 文件</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配一个字符</td>\n<td>???.java 匹配所有 四个字母的 java 文件（不包括扩展名）</td>\n</tr>\n<tr>\n<td>[…]</td>\n<td>匹配<strong>一个字符合集</strong>，可以使用连线符 [0-9] 和取反符 [!0-9]</td>\n<td>Test [0-9A-F].java 匹配 Textx.java ，其中 x 是一个 16 进制数字</td>\n</tr>\n<tr>\n<td css-module=\".\"></td>\n<td>匹配由逗号隔开的 <strong>多个可选项之一</strong></td>\n<td>*.{java,class} 匹配所有的 java 文件 和 class 文件</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义上述任意模式中的字符以及 \\ 字符</td>\n<td><em>\\</em>* 匹配所有文件名中包含 * 的文件（此处不应该复制使用）</td>\n</tr>\n</tbody>\n</table>\n<p>如果想要访问某个目录的所有子孙成员，可以转而调用  <code>walkFileTree</code>  方法，并向其传递一个  <code>FileVisitor</code>  类型的对象（比如  <code>SimpleFileVisitor</code>  对象），这个对象会得到以下通知：</p>\n<ul>\n<li>** 在遇到一个文件或目录时：** 会调用  <code>FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException;</code></li>\n<li><strong>在一个目录被处理前：</strong> <code>FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException;</code></li>\n<li><strong>在一个目录被处理之后：</strong> <code>FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException;</code></li>\n<li><strong>在试图访问文件或目录时发生错误，例如没有权限打开目录：</strong>  <code>FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException</code></li>\n</ul>\n<p>对于上述每一种情况，都可以指定是否希望执行下面的操作：</p>\n<ul>\n<li><strong>继续访问下一个文件：</strong> <code>FileVisitResult.CONTINUE</code></li>\n<li>继续访问，但是<strong>不再访问这个目录下面的任何项了：</strong> <code>FileVisitResult.SKIP_SUBTREE</code></li>\n<li>继续访问，但是<strong>不再访问这个文件的兄弟文件（同级文件）：</strong> <code>FileVisitResult.SKIP_SIBLINGS</code></li>\n<li><strong>终止访问：</strong> <code>FileVisitResult.TERMINATE</code></li>\n</ul>\n<h1 id=\"25-内存映射文件\"><a class=\"markdownIt-Anchor\" href=\"#25-内存映射文件\">#</a> 2.5 - 内存映射文件</h1>\n<blockquote>\n<p>大多数操作系统都可以利用虚拟内存来实现将一个文件或者文件的一部分 “映射” 到内存中。然后，这个文件就可以被当作内存数组一样地访问，这比传统的文件操作要快得多。</p>\n</blockquote>\n<h2 id=\"251-如何使用内存映射文件\"><a class=\"markdownIt-Anchor\" href=\"#251-如何使用内存映射文件\">#</a> 2.5.1 - 如何使用内存映射文件</h2>\n<blockquote>\n<p>java.nio 包使内存映射变得非常简单，下面就是我们需要做的：</p>\n</blockquote>\n<ol>\n<li>从文件中获得一个通道（channel），通道是用于磁盘文件的一种抽象，它使我们可以访问诸如内存映射、文件加锁机制以及文件间快速数据传递等操作系统特性。 <code>FileChannel channel = FileChannel.open(path, options)</code> <img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215803.jpg\" alt=\"\"></li>\n<li>然后调用  <code>FileChannel</code>  类的  <code>map</code>  方法从这个通道中获得一个  <code>ByteBuffer</code>  。同时你可以指定想要映射的<strong>文件区域</strong>与<strong>映射模式</strong>，支持的模式有三种：<br>\n-   <code>**FileChannel.MapMode.READ_ONLY**</code> ** <strong>：所产生的缓冲区是</strong>只读的 **，任何对该缓冲区写入的尝试都会导致 ReadOnlyBufferException 异常。<br>\n-   <code>**FileChannel.MapMode.READ_WRITE**</code> ：所产生的缓冲区是<strong>可写的</strong>， 任何修改都会在<strong>某个时刻</strong>写回到文件中。注意，其他映射同一个文件的程序可能<strong>不能立即看到这些修改</strong>，多个程序同时进行文件映射的行为是依赖于操作系统的。<br>\n-   <code>**FileChannel.MapMode.PRIVATE**</code> ：所产生的缓冲区是<strong>可写的</strong>，但是任何修改对这个缓冲区来说都是私有的，不会传播到文件中。</li>\n</ol>\n<p>另外，还记得在 <strong>2.1.8 - 字符编码方式</strong> 中提到的对二进制数据的排序机制么，Java 对二进制数据使用 <strong>高位在前</strong> 的排序机制。</p>\n<ul>\n<li>如果要查询缓冲区中的字节顺序，可以如下调用：\n<ul>\n<li><code>ByteOrder b = buffer.order();</code></li>\n</ul>\n</li>\n<li>如果要设置字节顺序，可以如下调用：\n<ul>\n<li><code>buffer.order(ByteOrder.LITTLE_ENDIAN);</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"26-文件加锁机制\"><a class=\"markdownIt-Anchor\" href=\"#26-文件加锁机制\">#</a> 2.6 - 文件加锁机制</h1>\n<blockquote>\n<p>文件锁可以控制对文件或文件中某个范围的字节的访问。</p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"如何锁定一个文件\"><a class=\"markdownIt-Anchor\" href=\"#如何锁定一个文件\">#</a> 如何锁定一个文件？</h3>\n<ul>\n<li>\n<h2 id=\"调用-filechannel-类的-lock-或-trylock-方法\"><a class=\"markdownIt-Anchor\" href=\"#调用-filechannel-类的-lock-或-trylock-方法\">#</a> 调用 FileChannel 类的 lock 或 tryLock 方法：</h2>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">FileChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 无参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">FileLock</span> lock <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 有参的方法签名：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//shared : true 请求共享锁，在这种情况下，此通道必须打开以供读取（可能还有写入）； false 请求排他锁，在这种情况下，此通道必须打开以进行写入（可能还有读取）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">FileLock</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> shared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>此调用会阻塞直至可获得锁。</strong></p>\n<pre><code>  -  \n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">FileChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">FileLock</span> lock <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>此调用将立即返回，要么返回锁，要么返回 null</strong></p>\n<ul>\n<li>注意 lock 方法抛出的异常：\n<ul>\n<li><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215806.jpg\" alt=\"\"><strong>说明文件锁和对象锁完全是两回事！！</strong></li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h3 id=\"文件什么时候解锁\"><a class=\"markdownIt-Anchor\" href=\"#文件什么时候解锁\">#</a> 文件什么时候解锁？</h3>\n<ul>\n<li>通道关闭。</li>\n<li>在锁上调用了  <code>release</code>  方法</li>\n<li></li>\n</ul>\n<p><a name=\"b88918dc-1\"></a></p>\n<h3 id=\"注-2\"><a class=\"markdownIt-Anchor\" href=\"#注-2\">#</a> 注：</h3>\n<ul>\n<li>文件加锁机制是依赖于操作系统的。</li>\n<li>在某些系统中，文件加锁仅仅是 <strong>建议性</strong> 的，不一定会生效。</li>\n<li>在某些系统中，不能在锁定一个文件的同时将其映射到内存中。</li>\n<li>文件锁是整个 Java 虚拟机持有的。也就是说当<strong>一个由 JVM 启动 的程序 或 一个线程</strong>请求某个区域的文件锁时，若该文件区域的锁已经被<strong>一个由同一个 JVM 启动的 另一个程序 或 另一个线程</strong> 锁持有，那么将抛出  <code>OverlappingFileLockException</code></li>\n<li>在一些系统中，关闭一个通道会释放由 Java 虚拟机持有的 底层文件 上的所有锁。因此，在同一个锁定文件上应避免使用多个通道。</li>\n<li>在网络文件系统上锁定文件是高度依赖于系统的，因此应该尽量避免。</li>\n</ul>\n<h1 id=\"27-正则表达式基础\"><a class=\"markdownIt-Anchor\" href=\"#27-正则表达式基础\">#</a> 2.7 - 正则表达式基础</h1>\n<p>以下截图来自于 B 站韩顺平老师的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUVxNHkxRTc5Vz9zcG1faWRfZnJvbT0zMzMuMzM3LnNlYXJjaC1jYXJkLmFsbC5jbGljaw==\">【韩顺平讲 Java】Java 正则表达式专题 - 正则 正则表达式 元字符 限定符 Pattern Matcher 分组 捕获 反向引用等_哔哩哔哩_bilibili</span></p>\n<p>书上很全面，但是也要取其精华，不然太多了也记不住。。。</p>\n<p><strong>所以建议去看韩顺平老师的视频，用代码来练习。</strong></p>\n<h2 id=\"语法介绍\"><a class=\"markdownIt-Anchor\" href=\"#语法介绍\">#</a> 语法介绍：</h2>\n<h4 id=\"按照功能分类大致\"><a class=\"markdownIt-Anchor\" href=\"#按照功能分类大致\">#</a> 按照功能分类：（大致</h4>\n<ol>\n<li>限定符</li>\n<li>选择匹配符</li>\n<li>分组组合和反向引用符</li>\n<li>特殊字符</li>\n<li>字符匹配符</li>\n<li>定位符</li>\n</ol>\n<h4 id=\"元字符转意号\"><a class=\"markdownIt-Anchor\" href=\"#元字符转意号\">#</a> 元字符：转意号 \\</h4>\n<p>需要用到转意符号的字符：. * + () $ / \\ ? [] ^</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215808.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215810.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215813.jpg\" alt=\"\"></p>\n<h4 id=\"选择匹配符\"><a class=\"markdownIt-Anchor\" href=\"#选择匹配符\">#</a> 选择匹配符：|</h4>\n<h4 id=\"限定符\"><a class=\"markdownIt-Anchor\" href=\"#限定符\">#</a> 限定符：</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215816.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215818.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215821.jpg\" alt=\"\"></p>\n<h4 id=\"定位符\"><a class=\"markdownIt-Anchor\" href=\"#定位符\">#</a> 定位符：</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215823.jpg\" alt=\"\"></p>\n<h4 id=\"捕获分组\"><a class=\"markdownIt-Anchor\" href=\"#捕获分组\">#</a> 捕获分组：</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215826.jpg\" alt=\"\"></p>\n<h4 id=\"非捕获分组\"><a class=\"markdownIt-Anchor\" href=\"#非捕获分组\">#</a> 非捕获分组：</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215828.jpg\" alt=\"\"></p>\n<h1 id=\"33-解析-xml-文档\"><a class=\"markdownIt-Anchor\" href=\"#33-解析-xml-文档\">#</a> 3.3 - 解析 XML 文档</h1>\n<ol>\n<li>首先要获取文档对象</li>\n</ol>\n<ul>\n<li>这里引用尚硅谷 JavaWeb 教程中的一段代码：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解析 applicationController 配置文件 （path 是 String 类型的，不是 Path 类型的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">InputStream</span> resourceAsStream <span class=\"token operator\">=</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 DocumentBuilderFactory 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">DocumentBuilderFactory</span> documentBuilderFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">DocumentBuilderFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建 DocumentBuilder 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">DocumentBuilder</span> documentBuilder <span class=\"token operator\">=</span> documentBuilderFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newDocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建 Document 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> documentBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>resourceAsStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>然后就可以开始解析文档了</li>\n</ol>\n<ul>\n<li>下面列出一些常用的 API ：\n<ul>\n<li>Document :</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名、方法参数 及 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Element</code></td>\n<td><code>getDocumentElement()</code>   这是一个方便属性，允许直接访问作为文档的文档元素的子节点。</td>\n</tr>\n<tr>\n<td><code>Element</code></td>\n<td><code>getElementById(String elementId)</code>   返回  <code>Element</code>  具有与给定值的 ID 属性。</td>\n</tr>\n<tr>\n<td><code>NodeList</code></td>\n<td><code>getElementsByTagName(String tagname)</code>   以文件顺序返回  <code>NodeList</code>  所有   <code>Elements</code>  的给定标签名称，并包含在文档中。</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getInputEncoding()</code>   指定在解析时用于此文档的编码的属性。</td>\n</tr>\n</tbody>\n</table>\n<pre><code>  -  Element :  \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名、方法参数 及 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td><code>getAttribute(String name)</code>   按名称检索属性值。</td>\n</tr>\n</tbody>\n</table>\n<pre><code>  -  NodeList :  \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名、方法参数 及 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Node</code></td>\n<td><code>item(int index)</code>   返回  <code>index</code>  中的 index 项。</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>getLength()</code>   列表中的节点数。</td>\n</tr>\n</tbody>\n</table>\n<pre><code>  -  Node :  \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名、方法参数 及 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static short ELEMENT_NODE</code></td>\n<td>节点是  <code>Element</code>  。</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><code>getNodeType()</code>   代表基础对象的类型的代码，如上所定义。</td>\n</tr>\n<tr>\n<td><code>NodeList</code></td>\n<td><code>getChildNodes()</code>   A  <code>NodeList</code>  包含此节点的所有子节点。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>另外需要注意的是：\n<ul>\n<li><strong>标签与标签间的空白字符也是子元素。</strong><img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215831.jpg\" alt=\"\"><strong>bean 标签的</strong> <strong>子标签 实际上有三个</strong>：<img data-src=\"https://cdn.jsdelivr.net/gh/zrgzs/images@main/images/20230907215832.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"341-文档类型的定义-dtd\"><a class=\"markdownIt-Anchor\" href=\"#341-文档类型的定义-dtd\">#</a> 3.4.1 - 文档类型的定义 DTD</h1>\n<p>这里放上大佬的 blog：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzYxMzEzODk2L2FydGljbGUvZGV0YWlscy8xMjUwODE5NzY=\"> J2EE 快速入门之第四章 XML_DTD 定义讲解_靖康之耻的博客 - CSDN 博客</span></p>\n<p>好了现在已经会编写 DTD 了，那么就可以配置解析器以充分的利用它们了。下面是一些相关的 API ：</p>\n<ul>\n<li><code>documentBuilderFactory.setValidating(true);</code>  可以开启 DTD 验证。</li>\n<li><code>documentBuilderFactory.setIgnoringElementContentWhitespace(true);</code>  可以忽略掉 ” 可忽略的空格 “</li>\n<li><code>documentBuilder.setErrorHandler(//...);</code>  可以设置错误处理器，可以将错误打印到日志中。</li>\n</ul>\n<h1 id=\"342-xml-schema\"><a class=\"markdownIt-Anchor\" href=\"#342-xml-schema\">#</a> 3.4.2 - XML Schema</h1>\n<p>详见 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL1RSL3htbHNjaGVtYS0wLw==\">XML 架构第 0 部分：入门第二版 (w3.org)</span></p>\n<h1 id=\"35-使用-xpath-来定位信息\"><a class=\"markdownIt-Anchor\" href=\"#35-使用-xpath-来定位信息\">#</a> 3.5 - 使用 XPath 来定位信息</h1>\n<p>详见 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL1RSL3hwYXRoLw==\">xpath 封面 - W3C</span></p>\n<p>或者 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96dm9uLm9yZy94eGwvWFBhdGhUdXRvcmlhbC9HZW5lcmFsL2V4YW1wbGVzLmh0bWw=\">XPath 教程 (zvon.org)</span></p>\n<p>计算 XPath 表达式的方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建工厂对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">XPathFactory</span> xPathFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">XPathFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 从工厂中获取一个 XPath 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">XPath</span> xPath <span class=\"token operator\">=</span> xPathFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newXPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名 方法参数 以及 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>XPathExpression</code></td>\n<td><code>compile(String expression)</code>   编译 XPath 表达式供以后评估。</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>evaluate(String expression, InputSource source)</code>   计算指定的上下文中的 XPath 表达式  <code>InputSource</code>  并返回结果作为   <code>String</code>  。</td>\n</tr>\n<tr>\n<td><code>Object</code></td>\n<td><code>evaluate(String expression, InputSource source, QName returnType)</code>   计算指定的上下文中的 XPath 表达式  <code>InputSource</code>  并返回其结果作为指定的类型。</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>evaluate(String expression, Object item)</code>   评估指定上下文中的 XPath 表达式，并将结果作为  <code>String</code>  。</td>\n</tr>\n<tr>\n<td><code>Object</code></td>\n<td><code>evaluate(String expression, Object item, QName returnType)</code>   在指定的上下文中评估一个  <code>XPath</code>  表达式，并将结果作为指定的类型返回。</td>\n</tr>\n<tr>\n<td><code>NamespaceContext</code></td>\n<td><code>getNamespaceContext()</code>   返回当前命名空间上下文。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>需要注意的是：</strong></p>\n<p><code>evaluate</code>  方法中含有第三个参数  <code>QName returnType</code>  的方法会有以下异常：</p>\n<p>IllegalArgumentException – <strong>如果 returnType 不是 XPathConstants 中定义的类型之一</strong></p>\n<h1 id=\"37-sax-解析器\"><a class=\"markdownIt-Anchor\" href=\"#37-sax-解析器\">#</a> 3.7 - SAX 解析器</h1>\n<h2 id=\"371-使用-sax-解析器\"><a class=\"markdownIt-Anchor\" href=\"#371-使用-sax-解析器\">#</a> 3.7.1 - 使用 SAX 解析器</h2>\n<h2 id=\"372-使用-stax-解析器\"><a class=\"markdownIt-Anchor\" href=\"#372-使用-stax-解析器\">#</a> 3.7.2 - 使用 StAX 解析器</h2>\n<h1 id=\"38-使用-dom-树生成-xml-文档\"><a class=\"markdownIt-Anchor\" href=\"#38-使用-dom-树生成-xml-文档\">#</a> 3.8 - 使用 DOM 树生成 XML 文档</h1>\n<h1 id=\"384-使用-stax-写出-xml文档\"><a class=\"markdownIt-Anchor\" href=\"#384-使用-stax-写出-xml文档\">#</a> 3.8.4 - 使用 StAX 写出 XML 文档</h1>\n<h1 id=\"385-生成-svg-文件\"><a class=\"markdownIt-Anchor\" href=\"#385-生成-svg-文件\">#</a> 3.8.5 - 生成 SVG 文件</h1>\n<h1 id=\"39-xsl-转换\"><a class=\"markdownIt-Anchor\" href=\"#39-xsl-转换\">#</a> 3.9 - XSL 转换</h1>\n",
            "tags": []
        }
    ]
}